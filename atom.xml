<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[猫好きモバイルアプリケーション開発者記録]]></title>
  <link href="http://kkoudev.github.io/atom.xml" rel="self"/>
  <link href="http://kkoudev.github.io/"/>
  <updated>2014-06-16T01:49:09+09:00</updated>
  <id>http://kkoudev.github.io/</id>
  <author>
    <name><![CDATA[kkoudev]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Imlib2とImage::Imlib2のJPEGヒント対応版を作成しました]]></title>
    <link href="http://kkoudev.github.io/blog/2014/06/15/imlib2/"/>
    <updated>2014-06-15T21:47:17+09:00</updated>
    <id>http://kkoudev.github.io/blog/2014/06/15/imlib2</id>
    <content type="html"><![CDATA[<p>久々に作ったものをGithubへ公開しました。<br>
元ネタは、よくImageMagickと比較される Imlib2 です。<br>
これのJPEGヒント対応版が欲しくなったので探したのですが、どこにも見当たらなかったのでいっそのこと自分で作りました。<br>
(対応については<a href="http://labs.edge.jp/smalllight/">SmallLight</a>のソースを参考にさせて頂きました)<br></p>

<h2>JPEGヒント(scale denom)とは</h2>


<p>まずJPEGヒントとは何かというと、ImageMagickやImlib2で利用しているlibjpeg ver.7以降で利用することの出来る scale_denom というスケーリング手法の俗称です。<br>
これは簡単に言うと予めリサイズ後のサイズがわかっている場合に、元画像ロード時にメモリを効率よく確保しつつリサイズを高速化する手法です。<br>
ImageMagickではこの機能をサポートしており、「-define jpeg:size=640x480」といったオプションをつけることで利用することができます。<br>
よく「ImageMagickは遅い」と言われるのですが、このJPEGヒントを利用することで10倍近くの高速化が測れます。<br></p>

<p>ところが、Imlib2にはこのオプションが存在せず、APIにもそれをサポートしたものがありません。
APIの設計上、JPEGのみに特化した設計にはなっていないというのも理由の１つかも知れませんが、
JPEGヒントがないImlib2は単純なリサイズですとJPEGヒントを利用したImageMagickと同等か少し遅くなってしまうため、ベースの速度が速いのにこのままでは非常に勿体ないわけです。<br></p>

<h2>JPEGヒントをサポートしたImlib2の利用</h2>


<p>そこで今回、Imlib2を拡張してJPEGヒントが利用できるように実装しました。<br>
実際に利用する場合はPerlのライブラリであるImage::Imlib2を経由して利用します。<br>
このImage::Imlib2もJPEGヒントに対応させるために少し拡張しております。<br>
実際の利用イメージとしては以下のような感じです。<br></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="nn">Image::</span><span class="n">Imlib2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 元サイズ1920x1200の画像を使用</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$scaledImage</span> <span class="o">=</span> <span class="nn">Image::</span><span class="n">Imlib2</span><span class="o">-&gt;</span><span class="n">load_scale</span><span class="p">(</span><span class="s">&#39;sample.jpg&#39;</span><span class="p">,</span> <span class="mi">640</span><span class="p">,</span> <span class="mi">480</span><span class="p">);</span>
</span><span class='line'><span class="nv">$scaledImage</span> <span class="o">=</span> <span class="nv">$scaledImage</span><span class="o">-&gt;</span><span class="n">create_scaled_image</span><span class="p">(</span><span class="mi">640</span><span class="p">,</span> <span class="mi">480</span><span class="p">);</span>
</span><span class='line'><span class="nv">$scaledImage</span><span class="o">-&gt;</span><span class="n">set_quality</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
</span><span class='line'><span class="nv">$scaledImage</span><span class="o">-&gt;</span><span class="n">save</span><span class="p">(</span><span class="s">&#39;sample_resized.jpg&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>「load_scale」というメソッドを追加しており、これを利用することでロード時にリサイズ後のサイズを指定します。
あとは普通にリサイズして書き出してみます。
これだけで、このサイズの場合は元のJPEGヒントを利用しない場合に比べて 1.5 倍ほど高速化しております。</p>

<h2>チューニング対応したImageMagickとの比較</h2>


<p>それでは、ImageMagickと速度比較してみます。<br>
対等に比較を行うために、まずImageMagickの高速化を測ります。<br>
具体的には、以下のオプションを指定して予めコンパイルしておきます。<br></p>

<h3>01. 高速化のためのImageMagickのコンパイルオプション</h3>


<p>01. &mdash;disable-openmp を指定してOpenMPを無効にする<br>
→これが有効になっていると、マルチスレッド実行時に異常にメモリを消費して重くなる<br></p>

<p>02. &mdash;with-quantum-depth=8 を指定してRPG分解能を 8 bitにする。<br>
→通常はこれで十分に24/32 bitの画像を処理できます。この指定をしなくても、convert 実行時に -depth 8 をオプションとして渡してもOK<br></p>

<p>特に 01 が重要になります。<br>
画像のサムネイル作成を高速化する場合、最初に出てくる発想としてはマルチスレッドで実行することがあげられますが、
OpenMPはそのマルチスレッドによる実行時に異常な負荷をあげる原因となっているからです。
02は -depth 8 を convert 実行時に指定しても良いと思いますが、コマンド実行時に特に意識させずに高速化したいのであればコンパイル時に指定してしまいましょう。</p>

<h3>02. libjpeg-turboの導入</h3>


<p>ImageMagickもImlib2も通常はlibjpegを利用しますが、このlibjpegよりも更に高速に処理ができる libjpeg-turbo というライブラリがあります。
これを利用することで更に 1.3 倍ほど高速になります。
導入方法は簡単で、<a target="_blank" href="http://sourceforge.net/projects/libjpeg-turbo/files/">こちら</a>より最新版のRPMをダウンロードしてインストールします。
すると、/opt 配下へインストールされますので、以下のようにして共有ライブラリファイルとして認識させます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> /opt/libjpeg-turbo/lib64 &gt; /etc/ld.so.conf.d/libjpeg-turbo.conf
</span><span class='line'>ldconfig
</span></code></pre></td></tr></table></div></figure>


<p>これでインストール済みのImageMagickとImlib2が libjpeg-turbo の方を利用するようになります。</p>

<h3>03. 実効速度の比較</h3>


<p>準備が完了したところで、実効速度を比較してみます。<br>
今回の検証では 1920x1200 のJPEG画像を 640x480 へ 1000 回リサイズした場合の速度差を比較しています。<br>
具体的には以下の内容のシェルスクリプトを作成して速度比較してみました。<br></p>

<p>＜ImageMagick＞</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">time</span> /bin/bash <span class="s">&lt;&lt; TIMEEND</span>
</span><span class='line'><span class="s">for (( i = 0; i &lt; 1000; i++ ))</span>
</span><span class='line'><span class="s">do</span>
</span><span class='line'><span class="s">    convert -define jpeg:size=640x480 -quality 100 -scale 640x480 sample.jpg sample_resized.jpg</span>
</span><span class='line'><span class="s">done</span>
</span><span class='line'><span class="s">TIMEEND</span>
</span></code></pre></td></tr></table></div></figure>


<p>＜Imlib2＞<br>
シェルスクリプトから呼び出すPerlスクリプト (resize.pm とします)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1">#!/usr/bin/env perl</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Image::</span><span class="n">Imlib2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$scaledImage</span> <span class="o">=</span> <span class="nn">Image::</span><span class="n">Imlib2</span><span class="o">-&gt;</span><span class="n">load_scale</span><span class="p">(</span><span class="s">&#39;sample.jpg&#39;</span><span class="p">,</span> <span class="mi">640</span><span class="p">,</span> <span class="mi">480</span><span class="p">);</span>
</span><span class='line'><span class="nv">$scaledImage</span> <span class="o">=</span> <span class="nv">$scaledImage</span><span class="o">-&gt;</span><span class="n">create_scaled_image</span><span class="p">(</span><span class="mi">640</span><span class="p">,</span> <span class="mi">480</span><span class="p">);</span>
</span><span class='line'><span class="nv">$scaledImage</span><span class="o">-&gt;</span><span class="n">set_quality</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
</span><span class='line'><span class="nv">$scaledImage</span><span class="o">-&gt;</span><span class="n">save</span><span class="p">(</span><span class="s">&#39;sample_resized.jpg&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>実行するシェルスクリプト</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">time</span> /bin/bash <span class="s">&lt;&lt; TIMEEND</span>
</span><span class='line'><span class="s">for (( i = 0; i &lt; 1000; i++ ))</span>
</span><span class='line'><span class="s">do</span>
</span><span class='line'><span class="s">    `dirname $0`/resize.pm</span>
</span><span class='line'><span class="s">done</span>
</span><span class='line'><span class="s">TIMEEND</span>
</span></code></pre></td></tr></table></div></figure>




<h3>結果</h3>


<p>＜ImageMagick＞</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>real    1m12.344s
</span><span class='line'>user    0m58.140s
</span><span class='line'>sys     0m8.317s
</span></code></pre></td></tr></table></div></figure>


<p>＜Imlib2＞</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>real    0m52.510s
</span><span class='line'>user    0m36.622s
</span><span class='line'>sys     0m9.565s
</span></code></pre></td></tr></table></div></figure>


<p>チューニングしたImageMagickと比較しても、JPEGヒントを利用したImlib2はかなり速いことがわかります。
画質についても素人目には違いが判りません。</p>

<h2>まとめ</h2>


<p>Imlib2はこのように速度が非常に速いことが利点ですが、
欠点としてはWindowsやMacへ導入するとなると少々面倒くさいので、開発時のデバッグが容易に出来ません。(その点、ImageMagickは簡単に導入できます)
また、GIF画像の書き出しもサポートしていないので、GIF画像を扱う必要がある場合はImageMagickと併用するなどして対応する必要があります。
そのため、GIF以外の画像(特にJPEG画像)を多く扱い、速度を追求する必要が有る場合はImlib2の利用をお勧めします。</p>

<p>開発時にWindowsやMacで利用する場合は頑張ってImlib2をインストールするのもありですが、
どちらかといえばImageMagickとImlib2を同じインターフェースで利用出来るクラスを作成して、環境ごとに切り替えする方がいいかもしれません。
これについてはJavaのクラスとして近々作成予定ですので、完成次第展開いたします。</p>

<p>今回作成したJPEGヒント対応版のImlib2とImage::Imlib2については以下よりダウンロードしてください。<br></p>

<p><a target="_blank" href="https://github.com/kkoudev/imlib2">Imlib2</a><br>
<a target="_blank" href="https://github.com/kkoudev/Image-Imlib2">Image::Imlib2</a><br></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradleでリソースファイルをフィルタリングする場合の注意点]]></title>
    <link href="http://kkoudev.github.io/blog/2014/05/26/gradle-filtering-resources/"/>
    <updated>2014-05-26T01:39:26+09:00</updated>
    <id>http://kkoudev.github.io/blog/2014/05/26/gradle-filtering-resources</id>
    <content type="html"><![CDATA[<p>Gradleでリソースファイルのフィルタリングを行う例は検索サイトで調べると結構多くヒットするかと思います。
ですが、その殆どが今回紹介する注意点について考慮されていないスクリプト記述をしています。
具体的に何を注意しなければならないのでしょうか。
以下にリソースフィルタリングの例を紹介します。</p>

<h3>問題となるスクリプト</h3>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * ベースロジック</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">project</span><span class="o">(</span><span class="s1">&#39;:base&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;eclipse&#39;</span>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;idea&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">processResources</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">from</span><span class="o">(</span><span class="n">sourceSets</span><span class="o">.</span><span class="na">main</span><span class="o">.</span><span class="na">resources</span><span class="o">.</span><span class="na">srcDirs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// トークンを置換する</span>
</span><span class='line'>            <span class="n">filter</span><span class="o">(</span>
</span><span class='line'>                <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">tools</span><span class="o">.</span><span class="na">ant</span><span class="o">.</span><span class="na">filters</span><span class="o">.</span><span class="na">ReplaceTokens</span><span class="o">,</span>
</span><span class='line'>                <span class="nl">tokens:</span> <span class="o">[</span>
</span><span class='line'>                    <span class="s1">&#39;version&#39;</span><span class="o">:</span> <span class="s1">&#39;1.0.0&#39;</span><span class="o">,</span>
</span><span class='line'>                    <span class="s1">&#39;db_ip&#39;</span><span class="o">:</span> <span class="s1">&#39;127.0.0.1&#39;</span>
</span><span class='line'>                <span class="o">]</span>
</span><span class='line'>            <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のスクリプトは、baseプロジェクトに含まれるリソースファイル(JARやWARに含まれるソースコード以外のファイル)に対して
「@version@」と「@db_ip@」の指定が含まれていた場合にそれぞれを指定の値に置換するという指定です。<br>
一見これは上手く動作しますし、問題ないケースもあります。</p>

<p>しかし、この指定は見ての通り<strong><font color="red">リソースファイル全てに対して行われれます</font></strong>。<br>
これはどういうことなのかというと、リソースファイルがテキストファイルであれば何ら問題はないのですが、
バイナリファイルが含まれているとそれすらも置換対象となってしまうのです！</p>

<p>例えばWebサイトシステムでは、ExcelファイルのテンプレートとなるExcelを予めJARやWARに含めて、
それをプログラム内で利用するケースがよくあるかと思います。
その場合、リソースファイルであるExcelファイルすらも置換対象となり、<strong><font color="red">ファイルが盛大に壊れます</font></strong>。
Mavenでフィルタリングを行うときはバイナリファイルは対象外となるため、それを期待して利用するととんでもない目に遭うわけです。</p>

<h2>解決方法</h2>


<p>解決策としては、以下のように対象となる拡張子を指定することで回避します。
gradle.propertiesに拡張子を定義しておくと管理しやすいです。</p>

<p>[gradle.properties]</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="err">#</span> <span class="err">カンマ区切りで定義しておく</span>
</span><span class='line'><span class="n">replace</span><span class="o">.</span><span class="na">extensions</span><span class="o">=</span><span class="n">xml</span><span class="o">,</span><span class="n">conf</span><span class="o">,</span><span class="n">dicon</span>
</span></code></pre></td></tr></table></div></figure>


<p>[build.gradle]</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * ベースロジック</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">project</span><span class="o">(</span><span class="s1">&#39;:base&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;eclipse&#39;</span>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;idea&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">processResources</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// フィルタ対象リソース拡張子分繰り返す</span>
</span><span class='line'>        <span class="n">getProperty</span><span class="o">(</span><span class="s1">&#39;replace.extensions&#39;</span><span class="o">).</span><span class="na">tokenize</span><span class="o">(</span><span class="s1">&#39;,&#39;</span><span class="o">).</span><span class="na">each</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// 対象ファイルの場合</span>
</span><span class='line'>            <span class="n">filesMatching</span><span class="o">(</span><span class="s2">&quot;**/*.$it&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// トークンを置換する</span>
</span><span class='line'>                <span class="n">filter</span><span class="o">(</span>
</span><span class='line'>                    <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">tools</span><span class="o">.</span><span class="na">ant</span><span class="o">.</span><span class="na">filters</span><span class="o">.</span><span class="na">ReplaceTokens</span><span class="o">,</span>
</span><span class='line'>                    <span class="nl">tokens:</span> <span class="o">[</span>
</span><span class='line'>                        <span class="s1">&#39;version&#39;</span><span class="o">:</span> <span class="s1">&#39;1.0.0&#39;</span><span class="o">,</span>
</span><span class='line'>                        <span class="s1">&#39;db_ip&#39;</span><span class="o">:</span> <span class="s1">&#39;127.0.0.1&#39;</span>
</span><span class='line'>                    <span class="o">]</span>
</span><span class='line'>                <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>filesMatchingを利用するのがミソになります。
拡張子を build.gradle へ直接記載する場合は以下のような書き方でも動作します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * ベースロジック</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">project</span><span class="o">(</span><span class="s1">&#39;:base&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;eclipse&#39;</span>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;idea&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">processResources</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">from</span><span class="o">(</span><span class="n">sourceSets</span><span class="o">.</span><span class="na">main</span><span class="o">.</span><span class="na">resources</span><span class="o">.</span><span class="na">srcDirs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// 対象拡張子のみコピー</span>
</span><span class='line'>            <span class="n">include</span> <span class="s1">&#39;xml&#39;</span>
</span><span class='line'>            <span class="n">include</span> <span class="s1">&#39;conf&#39;</span>
</span><span class='line'>            <span class="n">include</span> <span class="s1">&#39;dicon&#39;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// トークンを置換する</span>
</span><span class='line'>            <span class="n">filter</span><span class="o">(</span>
</span><span class='line'>                <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">tools</span><span class="o">.</span><span class="na">ant</span><span class="o">.</span><span class="na">filters</span><span class="o">.</span><span class="na">ReplaceTokens</span><span class="o">,</span>
</span><span class='line'>                <span class="nl">tokens:</span> <span class="o">[</span>
</span><span class='line'>                    <span class="s1">&#39;version&#39;</span><span class="o">:</span> <span class="s1">&#39;1.0.0&#39;</span><span class="o">,</span>
</span><span class='line'>                    <span class="s1">&#39;db_ip&#39;</span><span class="o">:</span> <span class="s1">&#39;127.0.0.1&#39;</span>
</span><span class='line'>                <span class="o">]</span>
</span><span class='line'>            <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 残りのファイルをコピー</span>
</span><span class='line'>        <span class="n">from</span><span class="o">(</span><span class="n">sourceSets</span><span class="o">.</span><span class="na">main</span><span class="o">.</span><span class="na">resources</span><span class="o">.</span><span class="na">srcDirs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">exclude</span> <span class="s1">&#39;xml&#39;</span>
</span><span class='line'>            <span class="n">exclude</span> <span class="s1">&#39;conf&#39;</span>
</span><span class='line'>            <span class="n">exclude</span> <span class="s1">&#39;dicon&#39;</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ただ、この書き方は推奨いたしません。
なぜなら、上記の拡張子指定を動的記述すると上手く動作しないためです。
せっかくなので紹介しておきます。</p>

<h3>悪い例</h3>


<p>※ replace.extensions が gradle.properties に定義されていることとする</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * ベースロジック</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">project</span><span class="o">(</span><span class="s1">&#39;:base&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;eclipse&#39;</span>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;idea&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">processResources</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">from</span><span class="o">(</span><span class="n">sourceSets</span><span class="o">.</span><span class="na">main</span><span class="o">.</span><span class="na">resources</span><span class="o">.</span><span class="na">srcDirs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// フィルタ対象リソース拡張子分繰り返す</span>
</span><span class='line'>            <span class="n">getProperty</span><span class="o">(</span><span class="s1">&#39;replace.extensions&#39;</span><span class="o">).</span><span class="na">tokenize</span><span class="o">(</span><span class="s1">&#39;,&#39;</span><span class="o">).</span><span class="na">each</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// 対象拡張子のみコピー</span>
</span><span class='line'>                <span class="n">include</span> <span class="n">it</span>
</span><span class='line'>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// トークンを置換する</span>
</span><span class='line'>            <span class="n">filter</span><span class="o">(</span>
</span><span class='line'>                <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">tools</span><span class="o">.</span><span class="na">ant</span><span class="o">.</span><span class="na">filters</span><span class="o">.</span><span class="na">ReplaceTokens</span><span class="o">,</span>
</span><span class='line'>                <span class="nl">tokens:</span> <span class="o">[</span>
</span><span class='line'>                    <span class="s1">&#39;version&#39;</span><span class="o">:</span> <span class="s1">&#39;1.0.0&#39;</span><span class="o">,</span>
</span><span class='line'>                    <span class="s1">&#39;db_ip&#39;</span><span class="o">:</span> <span class="s1">&#39;127.0.0.1&#39;</span>
</span><span class='line'>                <span class="o">]</span>
</span><span class='line'>            <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 残りのファイルをコピー</span>
</span><span class='line'>        <span class="n">from</span><span class="o">(</span><span class="n">sourceSets</span><span class="o">.</span><span class="na">main</span><span class="o">.</span><span class="na">resources</span><span class="o">.</span><span class="na">srcDirs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// フィルタ対象リソース拡張子分繰り返す</span>
</span><span class='line'>            <span class="n">getProperty</span><span class="o">(</span><span class="s1">&#39;replace.extensions&#39;</span><span class="o">).</span><span class="na">tokenize</span><span class="o">(</span><span class="s1">&#39;,&#39;</span><span class="o">).</span><span class="na">each</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// 対象拡張子のみ除外</span>
</span><span class='line'>                <span class="n">exclude</span> <span class="n">it</span>
</span><span class='line'>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これだと同じ拡張子を指定しているにも関わらず、上手く動作しません。<br>
どうやら processResources において from 指定を行う場合、
同じパスに対して include と exclude の指定が被ると上手く動作せず、リソースファイルが全てJARやWARから消失します。
(ただし、直接記述すると何故か期待通りに動作する)
おそらく動的記述した場合と静的記述した場合でスクリプトの解釈順に違いが出るのだと思いますが、
無理に考えても仕方ないのでこの書き方はやめましょう。</p>

<h2>まとめ</h2>


<p>Gradleは便利ですが、Mavenのときと同じ挙動を期待するとこのような思わぬ落とし穴があります。
processResourcesでフィルタリングを行う場合は filesMatching、またはfilesNotMatching を利用し、対象ファイルの拡張子を限定してからフィルタリングするようにしましょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradleで陥りやすい問題点の解決策TIPS集]]></title>
    <link href="http://kkoudev.github.io/blog/2014/03/30/gradle-tips/"/>
    <updated>2014-03-30T22:45:00+09:00</updated>
    <id>http://kkoudev.github.io/blog/2014/03/30/gradle-tips</id>
    <content type="html"><![CDATA[<p>今回はGradleでよくハマるであろうポイントを集めたTIPSを11個紹介します。</p>

<h2>01. 依存関係のバージョンが指定されたものにならない</h2>


<p>MavenからGradleへ移行した場合、おそらく誰もが最初に陥る問題かと思います。
端的に言うと、Mavenの pom.xml で指定したままの依存関係の設定をそのまま build.gradle へ移したとしても
最終的に取得される依存関係は殆どのケースで同じにはなりません。
これは「<strong>推移的依存関係</strong>」によって同じライブラリが存在した場合に優先されるバージョンがMavenとGradleでは異なるために起こります。</p>

<p>推移的依存関係とは簡単に説明すると、ある依存関係がさらに依存する関係のことを言います。
MavenでもGradleでもそれらを自動的に取得しようとしますが、
それらの中で使っている依存関係のgroupIdもartifactIdも同じだがバージョンが異なる場合、
Javaでは同じライブラリの異なるバージョンを同じアプリ内へ共存させることが出来ませんから、
どちらかを優先させる必要が出てきます。</p>

<p>Mavenの場合は推移的依存関係における階層が高い方が優先されます。
しかしGradleでは、<strong><font color="red">バージョンが一番高いものが優先されます。</font></strong>
そのため、Gradleでは利用しない依存関係をひたすら exclude 指定で除外していく必要が出てきます。</p>

<p>MavenからGradleへ移行する場合に依存関係のバージョンを含めて全く同じにしたい場合は、
以下のように現在の依存関係の階層構造を出力してそれを比較して合わせていけばよいです。</p>

<p>＜Mavenで依存関係階層構造を出力＞</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 対象となるプロジェクトの pom.xml のあるディレクトリへ移動して実行</span>
</span><span class='line'>mvn dependency:tree
</span></code></pre></td></tr></table></div></figure>


<p>＜Gradleで依存関係階層構造を出力＞</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># baseプロジェクトの依存関係階層構造を出力する</span>
</span><span class='line'>gradle :base:dependencies
</span></code></pre></td></tr></table></div></figure>


<p>とはいえ、これがとにかく面倒です。
例えば自身で dependencies ブロックへ指定した依存関係が他の依存関係の推移的依存関係になっている場合、
exclude指定を行っても一見除去されないように見えたり(or 指定したバージョンにならなかったり)と、結構ハマります。
根気よく exclude 指定で不要なバージョンを除去して合わせていきましょう。</p>

<h2>02. EclipseのWTPで起動した場合に他のプロジェクトを参照しているとその参照しているプロジェクトの依存関係を読み込まない</h2>


<p>これも人によってはハマるポイントかと思います。
Eclipse上ではコンパイルエラーが出ていないのに、WTPでTomcatを起動すると参照しているプロジェクトの依存関係が無いと言われてしまう(ClassNotFoundExceptionが発生してしまう)現象です。
これは eclipse-wtp のプラグインの読み込み指定を行っていない場合に起こります。
どういうことなのかと言いますと、この例が起こるのは以下のように build.gradle を記述したときに起こります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Gradleによるプロジェクトビルドスクリプト。</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @author Kou</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;eclipse&#39;</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;idea&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * ベースロジック</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">project</span><span class="o">(</span><span class="s1">&#39;:base&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;eclipse&#39;</span>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;idea&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Struts</span>
</span><span class='line'>        <span class="n">compile</span><span class="o">(</span>
</span><span class='line'>                <span class="s1">&#39;taglibs:standard:1.1.2&#39;</span><span class="o">,</span>
</span><span class='line'>                <span class="s1">&#39;org.apache.struts:struts-core:1.3.10&#39;</span><span class="o">,</span>
</span><span class='line'>                <span class="s1">&#39;org.apache.struts:struts-tiles:1.3.10&#39;</span><span class="o">,</span>
</span><span class='line'>                <span class="s1">&#39;org.apache.struts:struts-taglib:1.3.10&#39;</span><span class="o">,</span>
</span><span class='line'>                <span class="s1">&#39;org.apache.struts:struts-el:1.3.10&#39;</span><span class="o">,</span>
</span><span class='line'>                <span class="s1">&#39;org.apache.struts:struts-extras:1.3.10&#39;</span><span class="o">,</span>
</span><span class='line'>        <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Solrj</span>
</span><span class='line'>        <span class="n">compile</span><span class="o">(</span>
</span><span class='line'>                <span class="s1">&#39;org.slf4j:slf4j-api:1.6.1&#39;</span><span class="o">,</span>
</span><span class='line'>                <span class="s1">&#39;org.slf4j:slf4j-log4j12:1.6.1&#39;</span><span class="o">,</span>
</span><span class='line'>                <span class="s1">&#39;org.apache.solr:solr-solrj:4.4.0&#39;</span><span class="o">,</span>
</span><span class='line'>        <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Solr Core</span>
</span><span class='line'>        <span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.apache.solr:solr-core:4.4.0&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">exclude</span> <span class="nl">group:</span> <span class="s1">&#39;org.slf4j&#39;</span><span class="o">,</span> <span class="nl">module:</span> <span class="s1">&#39;slf4j-jdk14&#39;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Test関係</span>
</span><span class='line'>        <span class="n">testCompile</span><span class="o">(</span>
</span><span class='line'>                <span class="s1">&#39;junit:junit:4.1.1&#39;</span><span class="o">,</span>
</span><span class='line'>        <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 管理サイト</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">project</span><span class="o">(</span><span class="s1">&#39;:admin&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;eclipse&#39;</span>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;idea&#39;</span>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;eclipse-wtp&#39;</span>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;war&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// WARファイル名</span>
</span><span class='line'>    <span class="n">archivesBaseName</span> <span class="o">=</span> <span class="s1">&#39;admin&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">compile</span> <span class="nf">project</span><span class="o">(</span><span class="s1">&#39;:base&#39;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">eclipse</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Dynamic Web Projectの設定</span>
</span><span class='line'>        <span class="n">wtp</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">component</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// EclipseのWTPで起動する場合のコンテキストパス</span>
</span><span class='line'>                <span class="n">contextPath</span> <span class="o">=</span> <span class="s1">&#39;/admin&#39;</span>
</span><span class='line'>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">facet</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">facet</span> <span class="nl">name:</span> <span class="s1">&#39;java&#39;</span><span class="o">,</span> <span class="nl">version:</span> <span class="n">getProperty</span><span class="o">(</span><span class="s1">&#39;java.version&#39;</span><span class="o">)</span>
</span><span class='line'>                <span class="n">facet</span> <span class="nl">name:</span> <span class="s1">&#39;jst.web&#39;</span><span class="o">,</span> <span class="nl">version:</span> <span class="n">getProperty</span><span class="o">(</span><span class="s1">&#39;java.servlet.version&#39;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記の例では、base プロジェクトに eclipse-wtp の指定がないことがわかります。
EclipseのWTPで起動するのは WAR プロジェクトのみです。
そのため、base プロジェクトのような通常のJavaプロジェクトは eclipse-wtp とは関係ないだろうと思いがちなのですが、
ここが落とし穴で、依存関係となるプロジェクトも含めて eclipse-wtp のプラグイン指定を行わないと、
たとえEclipse上でコンパイルエラーが出ていなくてもWTP起動時に読み込みの対象とならないのです。
なので、EclipseのWTPで起動させる場合は必ず WAR プロジェクト以外のプロジェクトにも eclipse-wtp のプラグインを読み込むよう指定してください。
(subprojects のブロックで指定すれば各プロジェクトごとにいちいち指定する必要がなくなるので記述量が減ります)</p>

<h2>03. プロパティの参照が出来ない場合がある</h2>


<p>主にGradleで利用するプロパティは gradle.properties に記述する方法や、
コマンド実行時に -P オプションで指定するのが一般的です。
そのプロパティをスクリプト内で参照する場合、以下の 2 つの参照方法があります。</p>

<p>1. プロパティ名の先頭に $ をつけてダブルクォーテーションで囲む<br>
2. getPropertyメソッドにプロパティ名を指定して取得する<br></p>

<p>記述が短いので $ をつけて参照する方法を選んでしまいがちですが、
以下のようにドットやハイフンを含むプロパティ名の場合は参照できません。</p>

<pre>
× java.version=1.6
× java-version=1.6
○ java_version=1.6
</pre>


<p>これは Bash をはじめとしたシェルスクリプトの変数と同じ仕様です。
Javaのpropertiesファイルは慣例的にドット区切りでプロパティ名を記述する傾向があります。
なので少なからずこの問題に陥る方もいらっしゃるかと思います。</p>

<p>じゃあ、ドットやハイフンを使った名前は利用できないのか？というと、そういうわけではありません。
上記の 2 の方法である getPropertyメソッドを利用すればドットやハイフンを含んだプロパティ名を参照できます。</p>

<p>そのため、私が普段スクリプトを記述する場合は、
コマンド実行時に -P オプションで指定したプロパティは 1 の方法で参照するようにし、
gradle.properties で指定されたプロパティは 2 の方法で参照するように区別しています。
その方がスクリプトを見たときにどこから指定されたプロパティを参照しようとしているのかが判断しやすいです。</p>

<h2>04. hasPropertyメソッドが常に false を返してしまう</h2>


<p>これもGradle初心者は陥りやすいかと思います。
-P オプションでプロパティを指定している場合で、
かつそのプロパティが必須ではない場合、プロパティの有無をスクリプト内で判断しないとエラーになってしまいます。
そこで、以下のように書いてみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span>     <span class="n">test</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使用するプロファイル名が指定されている場合</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">hasProperty</span><span class="o">(</span><span class="s1">&#39;propertyTest&#39;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 使用するプロファイル名を設定する</span>
</span><span class='line'>    <span class="n">test</span> <span class="o">=</span> <span class="s2">&quot;$propertyTest&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// デフォルトのプロファイル名を設定する</span>
</span><span class='line'>    <span class="n">test</span> <span class="o">=</span> <span class="s1">&#39;defaultTest&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>この場合、常に hasProperty メソッドは失敗してしまいます。
hasPropertyメソッドを何も指定せずに呼び出すと TaskのhasPropertyメソッドがコールされてしまい、
実際にプロジェクトに設定されたプロパティを判断できなくなる場合があります。
そこで、以下のように指定すると正常に判定することが出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span>     <span class="n">test</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使用するプロファイル名が指定されている場合</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">project</span><span class="o">.</span><span class="na">hasProperty</span><span class="o">(</span><span class="s1">&#39;propertyTest&#39;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 使用するプロファイル名を設定する</span>
</span><span class='line'>    <span class="n">test</span> <span class="o">=</span> <span class="s2">&quot;$propertyTest&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// デフォルトのプロファイル名を設定する</span>
</span><span class='line'>    <span class="n">test</span> <span class="o">=</span> <span class="s1">&#39;defaultTest&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のように「project.hasProperty」をコールすることで正常にプロパティ有無を判定することが出来るようになります。</p>

<h2>05. 環境ごとにリソースファイルを切り替えたい</h2>


<p>Mavenでは使用するリソースファイルを複数指定することが可能で、
更にはビルド時にプロファイルを指定することでそれを環境ごとに切り替えることが出来ます。
これをGradleで実現するには様々な方法がありますが、ここでは私が普段利用しているスクリプト例を紹介します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Gradleによるプロジェクトビルドスクリプト。</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @author Kou</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;eclipse&#39;</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;idea&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * サブプロジェクト全体の共通設定。</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">subprojects</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;eclipse&#39;</span>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;eclipse-wtp&#39;</span>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;idea&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sourceSets</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">def</span>     <span class="n">useProfileName</span>     <span class="c1">// 指定環境名称</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 使用するプロファイル名が指定されている場合</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">project</span><span class="o">.</span><span class="na">hasProperty</span><span class="o">(</span><span class="s1">&#39;profileName&#39;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// 使用するプロファイル名を設定する</span>
</span><span class='line'>            <span class="n">useProfileName</span> <span class="o">=</span> <span class="s2">&quot;$profileName&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// デフォルトのプロファイル名を設定する</span>
</span><span class='line'>            <span class="n">useProfileName</span> <span class="o">=</span> <span class="s1">&#39;local&#39;</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// メインリソースの指定</span>
</span><span class='line'>        <span class="n">main</span><span class="o">.</span><span class="na">resources</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">srcDirs</span> <span class="s1">&#39;src/main/resources&#39;</span>
</span><span class='line'>            <span class="n">srcDirs</span> <span class="s2">&quot;src/profile.$useProfileName/resources&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">eclipse</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">classpath</span><span class="o">.</span><span class="na">defaultOutputDir</span> <span class="o">=</span> <span class="n">file</span><span class="o">(</span><span class="s1">&#39;/target/classes&#39;</span><span class="o">)</span>                <span class="c1">// クラスファイル出力先</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記の「sourceSets」のブロック内がリソースを環境ごとに切り替える処理になります。
この build.gradle のプロジェクト設定は前回も紹介したとおりIDEでも利用される設定となります。
そのため、ここでは環境指定が無い場合はローカル環境の設定であるものと見なしています。</p>

<p>では、他の環境指定を行うにはいつ行えばいいのかというと、これはビルド時に指定します。
WARやJARのビルドを行うときに -P オプションでプロパティを与えて読み込む環境を指定します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">gradle</span> <span class="o">--</span><span class="n">daemon</span> <span class="o">-</span><span class="n">PprofileName</span><span class="o">=</span><span class="n">development</span> <span class="n">war</span>
</span></code></pre></td></tr></table></div></figure>


<p>こうすることで、「src/main/resources」「src/profile.development/resources」ディレクトリにあるリソースファイルが
WARに追加されるようになります。</p>

<h2>06. testCompileで依存関係となるプロジェクトを指定した場合にそのプロジェクトの testCompile を参照してくれない</h2>


<p>これはどうやら仕様(？)のようで、
compileの場合は「compile project(&lsquo;:base&rsquo;)」といったようにプロジェクトを指定するとその指定したプロジェクトの依存関係を継承しますが、
testCompileの場合は「testCompile project(&lsquo;:base&rsquo;)」と指定しても、どういうわけか継承しないようです。
この問題に対するスマートな解決方法というのは現時点ではあまりないのですが、
強いてあげるとすれば、以下のように各プロジェクトごとに testCompile の依存関係を指定してあげることで
ある程度管理しやすくなります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Gradleによるプロジェクトビルドスクリプト。</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @author Kou</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;eclipse&#39;</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;idea&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 依存関係を定義する</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">ext</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">libs</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// テストで利用する依存関係</span>
</span><span class='line'>        <span class="nl">testCompile:</span> <span class="o">[</span>
</span><span class='line'>            <span class="s1">&#39;junit:junit:4.4&#39;</span><span class="o">,</span>
</span><span class='line'>            <span class="s1">&#39;org.easymock:easymock:3.2&#39;</span><span class="o">,</span>
</span><span class='line'>            <span class="s1">&#39;org.hamcrest:hamcrest-all:1.3&#39;</span><span class="o">,</span>
</span><span class='line'>        <span class="o">],</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * ベースロジック</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">project</span><span class="o">(</span><span class="s1">&#39;:base&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Test関係</span>
</span><span class='line'>        <span class="n">testCompile</span> <span class="n">libs</span><span class="o">.</span><span class="na">testCompile</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 管理サイト</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">project</span><span class="o">(</span><span class="s1">&#39;:admin&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;war&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// WARファイル名</span>
</span><span class='line'>    <span class="n">archivesBaseName</span> <span class="o">=</span> <span class="s1">&#39;admin&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">compile</span> <span class="nf">project</span><span class="o">(</span><span class="s1">&#39;:base&#39;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Test関係</span>
</span><span class='line'>        <span class="n">testCompile</span> <span class="n">libs</span><span class="o">.</span><span class="na">testCompile</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>このように、拡張プロパティでテストの依存関係をまとめた変数を宣言し、
そこに利用する依存関係を全て記述すれば比較的管理のしやすい記述ができます。
これについてはもっとスマートな記述方法が今後登場しましたらそのときに再度紹介させていただきます。</p>

<h2>07. EclipseのWTPを利用している場合に provided や providedCompile の指定が効かない</h2>


<p>これは以前紹介させて頂いたEclipseのGradleプラグインである「Gradle Integration for Eclipse」のプラグインの仕様のようで、
このプラグインは自前で作成した provided の指定やWARプラグインを指定した場合のみ利用できる providedCompile の指定をしたとしても、
WTPでAPサーバを起動したときに WEB-INF/lib のディレクトリへ強制的に全ての依存関係ライブラリがコピーされてしまいます。要は provided であることを考慮してくれません。
この問題に対する公式な解決方法としては、Eclipseの設定から「Gradle」→「WTP」を選択し、そこに除去するプラグインを記述すれば WEB-INF/lib ディレクトリへコピーされなくなる、とのことです。
せっかくGradleを利用しているのに手動で設定するという点からもなんとも腑に落ちないですが…現状このプラグインを利用している以上はこうするしかないようです。</p>

<p>もう１つの解決策としては、「Gradle Integration for Eclipse」プラグインでインポートせず、
「gradle eclipse」コマンドを自前で実行してEclipseのプロジェクト設定ファイルを作成し、
作成後のプロジェクトをインポートするという方法です。
この方法であれば provided も考慮してプロジェクト設定を作成してくれます。
ただし、手動でコマンドを実行しなければならないという点がなんともスマートではないことと、
build.gradle を変更した場合(依存関係などを追加した場合)に再度コマンドを実行し直さなければなりません。
「Gradle Integration for Eclipse」プラグインを利用している場合はこのあたりを自動でやってくれます。</p>

<p>provided で除去するのは殆どの場合 servlet-api や jsp-api ですので、
腑に落ちない気持ちはありつつも、「Gradle Integration for Eclipse」プラグインを使用し、
Eclipseの設定で除去してしまう方法で利用していく方が無難かと思われます。</p>

<h2>08. 複数のMavenリポジトリを定義する</h2>


<p>参照するMavenリポジトリは repositories ブロック内で以下のように定義します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * サブプロジェクト全体の共通設定。</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">subprojects</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;eclipse&#39;</span>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;eclipse-wtp&#39;</span>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;idea&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">maven</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">url</span> <span class="nf">getProperty</span><span class="o">(</span><span class="s1">&#39;project.maven.repository.url.01&#39;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>任意のリポジトリを複数定義する場合は、mavenブロックに url パラメータを複数記述するかと思いがちですが、
そのような記述は出来ません。
以下のように記述します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * サブプロジェクト全体の共通設定。</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">subprojects</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;eclipse&#39;</span>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;eclipse-wtp&#39;</span>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;idea&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">maven</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">url</span> <span class="nf">getProperty</span><span class="o">(</span><span class="s1">&#39;project.maven.repository.url.01&#39;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">maven</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">url</span> <span class="nf">getProperty</span><span class="o">(</span><span class="s1">&#39;project.maven.repository.url.02&#39;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のように、mavenブロックを複数宣言することでURLを複数指定できます。</p>

<h2>09. アーカイブタスクで exclude 指定が効かない</h2>


<p>これも人によってはAntやMavenのときの記述に慣れてしまっているが故に勘違いしてしまいがちなのですが、
Zipなどのアーカイブタスクで exclude 指定をした場合に効かないように見えてしまう場合が有ります。</p>

<p>例として、前回紹介したbatchのパッケージを作成するタスクにおいて一部のファイルをZIPファイルへ含めないようにしたいと思います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * バッチ</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">project</span><span class="o">(</span><span class="s1">&#39;:batch&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * リリース用パッケージの作成を行う。</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">task</span> <span class="nf">distribution</span><span class="o">(</span><span class="nl">dependsOn:</span> <span class="s1">&#39;jar&#39;</span><span class="o">,</span> <span class="nl">type:</span> <span class="n">Zip</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">into</span> <span class="o">(</span><span class="s1">&#39;batch/bin&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">from</span> <span class="s1">&#39;bin&#39;</span>
</span><span class='line'>            <span class="n">exclude</span> <span class="s1">&#39;bin/test.sh&#39;</span>   <span class="c1">// test.sh を除去する指定</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="n">into</span> <span class="o">(</span><span class="s1">&#39;batch/libs&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">from</span> <span class="s1">&#39;build/libs/batch.jar&#39;</span>
</span><span class='line'>            <span class="n">from</span> <span class="n">configurations</span><span class="o">.</span><span class="na">compile</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記では、binディレクトリの中身にある test.sh のコピーを除去する想定で記述しました。
しかし、実際にこの状態でアーカイブを作成すると、 test.sh ファイルはZIPの中に含まれてしまいます。
AntやMavenの場合だと、exclude の指定を行えばそれだけで対象となるパスのファイルが除去されましたが、
Gradleの場合だと、以下のように指定する必要があります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * バッチ</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">project</span><span class="o">(</span><span class="s1">&#39;:batch&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * リリース用パッケージの作成を行う。</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">task</span> <span class="nf">distribution</span><span class="o">(</span><span class="nl">dependsOn:</span> <span class="s1">&#39;jar&#39;</span><span class="o">,</span> <span class="nl">type:</span> <span class="n">Zip</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">into</span> <span class="o">(</span><span class="s1">&#39;batch/bin&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">from</span> <span class="o">(</span><span class="s1">&#39;bin&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">exclude</span> <span class="s1">&#39;test.sh&#39;</span>   <span class="c1">// test.sh を除去する指定</span>
</span><span class='line'>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="n">into</span> <span class="o">(</span><span class="s1">&#39;batch/libs&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">from</span> <span class="s1">&#39;build/libs/batch.jar&#39;</span>
</span><span class='line'>            <span class="n">from</span> <span class="n">configurations</span><span class="o">.</span><span class="na">compile</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のように記述することで bin/test.sh ファイルをコピーしないようになります。
Gradleのアーカイブタスクにおける exclude 指定は、このようにコピーする対象となるディレクトリの from ブロック内に exclude 指定を記述する必要があります。</p>

<h2>10. ブランチ切り替えを頻繁に行った場合に他のブランチのクラスファイルが残る場合がある</h2>


<p>これは主にJenkinsでJavaビルドを行う場合に起こることが多いのですが、JenkinsではジョブのSCMのブランチ切り替えを頻繁に行うかと思います。
そうなると、例えばあるブランチにはあって、あるブランチにはないクラスファイルというものが当然のように出てきます。
そして、そのクラスファイルの一部が残ることでビルドエラーが発生する場合があります。
これを回避するには、以下のように「clean」タスクをビルド前に実行するように指定することで回避することが出来ます。(尤も、これはGradleに限らずMavenでも同じです)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">gradle</span> <span class="o">--</span><span class="n">daemon</span> <span class="n">clean</span> <span class="n">war</span>
</span></code></pre></td></tr></table></div></figure>


<p>clean タスクを実行すると更新する必要がないクラスも再コンパイルするようになってしまいますので、
ブランチ切り替えを行わないような例では開発スピードをあげるために、あえて clean を指定しないというのも手かと思います。
とはいえ、本番環境へリリースするWARやJARをビルドする場合は、万が一のことを考えて clean タスクを指定してビルドすることをお勧めします。</p>

<h2>11. 突然動作がおかしくなった場合にキャッシュをクリアする方法</h2>


<p>例えば、MavenリポジトリのURLを変更したなど、
さまざまな理由でキャッシュが残った場合に動作がおかしくなってエラーが発生する場合が有ります。
その場合、Gradleの作業用ディレクトリを削除すれば正常に動作する場合が有ります。
ユーザのホームディレクトリにある「.gradle」というディレクトリを削除することでキャッシュをクリアすることが出来ます。
ただしこの場合、Mavenの依存関係を一から取得し直しになるために、初回のビルド時に時間がかかります。
あくまで原因不明のエラー回復のための最終手段と思ってください。</p>

<h2>まとめ</h2>


<p>今回は私がGradleを利用した上でハマるであろうと考えたポイントを 11 個紹介させていただきました。
AntやMavenに慣れた人たちからすると、Gradleは最初のうちは少々取っ付きにくいものであるため、
このようにいくつかハマってしまうポイントが発生します。
Gradleをこれから使ってみようと思う皆様の参考になれば幸いです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradleによるビルドとパッケージ作成]]></title>
    <link href="http://kkoudev.github.io/blog/2014/03/24/gradle_build/"/>
    <updated>2014-03-24T21:46:02+09:00</updated>
    <id>http://kkoudev.github.io/blog/2014/03/24/gradle_build</id>
    <content type="html"><![CDATA[<p>前回の続きです。
Gradleのプロジェクトの設定が終わっただけでは当然ながら終わりません。
次はビルドが必要になります。
プロジェクト構成は前回の例をそのまま踏襲するとして、
実際にビルドをするときのコマンドを紹介します。</p>

<h2>WARとJARのビルド</h2>


<p>WARのビルドは以下のコマンドで行います。
(build.gradle ファイルのあるディレクトリへ移動してコマンドを実行します)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">gradle</span> <span class="o">--</span><span class="n">daemon</span> <span class="n">war</span>
</span></code></pre></td></tr></table></div></figure>


<p>なんとこれだけでWARのビルドが出来ます。
非常に簡潔です。
Gradleコマンドは立ち上がりが遅いのですが、上記のように &mdash;daemon というオプションを指定することでバックグラウンドに常駐するようになり、２回目以降のコマンドの立ち上がりが早くなります。</p>

<p>さて、前回のプロジェクト構成ですと、WARプロジェクトではないbatchプロジェクトが存在していたかと思います。
batchの場合はWARではなくJARとして作成する必要がありますので、上記のコマンドでは当然ビルドされません。
以下のコマンドでビルドします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">gradle</span> <span class="o">--</span><span class="n">daemon</span> <span class="o">:</span><span class="nl">batch:</span><span class="n">jar</span>
</span></code></pre></td></tr></table></div></figure>


<p>「:batch:jar」という指定は batch プロジェクトの jar タスクを実行するという指定になります。
WARのビルドの場合、build.gradle に記述されているWARプロジェクトを全て自動的に走査してビルドしてくれますが、
JARの指定を行う場合、WARプロジェクト自体もJARビルドが出来てしまうため、「gradle &mdash;daemon jar」としてしまうと
不要なプロジェクトに対してまでJARビルドが走ってしまいます。そのため、上記のようにプロジェクトを指定してビルドしています。</p>

<p>また、gradleの実行タスクはひとまとめにすることが出来ますので、WARビルドとbatchプロジェクトのJARビルドを合わせると以下のようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">gradle</span> <span class="o">--</span><span class="n">daemon</span> <span class="n">war</span> <span class="o">:</span><span class="nl">batch:</span><span class="n">jar</span>
</span></code></pre></td></tr></table></div></figure>




<h2>リリース用パッケージの作成</h2>


<p>次はリリース用のパッケージの作成についてです。
デプロイ時はAPサーバにそのままWARをコピーすれば良いのですが、
必要なファイルを全てひとまとめに圧縮して対象サーバへ転送し、ファイルを展開するような例も多いかと思います。
また、batchファイルについてはWARと違い、依存関係となるライブラリも全てコピーしてあげなくてはいけません。</p>

<p>Mavenだと maven-assembly-plugin というXMLに記述した構成でパッケージを作成するプラグインがありましたが、
これもXMLファイルに設定を記述していくので記述量が増えがちで若干面倒な感じがありました。
GradleではWARやJARの他にZIPやTARを生成するタスクも用意されており、
これらを組み合わせることで maven-assembly-plugin と同等の機能を実現できます。</p>

<p>具体的にbatchパッケージを作成する例を紹介しますと、batchプロジェクトの設定に以下のようにタスクを定義します。
(設定は前回のものを踏襲)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * バッチ</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">project</span><span class="o">(</span><span class="s1">&#39;:batch&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// クラスパスへ provided を追加</span>
</span><span class='line'>    <span class="n">sourceSets</span><span class="o">.</span><span class="na">main</span><span class="o">.</span><span class="na">compileClasspath</span>     <span class="o">+=</span> <span class="n">project</span><span class="o">(</span><span class="s1">&#39;:base&#39;</span><span class="o">).</span><span class="na">configurations</span><span class="o">.</span><span class="na">provided</span>
</span><span class='line'>    <span class="n">sourceSets</span><span class="o">.</span><span class="na">test</span><span class="o">.</span><span class="na">compileClasspath</span>     <span class="o">+=</span> <span class="n">project</span><span class="o">(</span><span class="s1">&#39;:base&#39;</span><span class="o">).</span><span class="na">configurations</span><span class="o">.</span><span class="na">provided</span>
</span><span class='line'>    <span class="n">sourceSets</span><span class="o">.</span><span class="na">test</span><span class="o">.</span><span class="na">runtimeClasspath</span>     <span class="o">+=</span> <span class="n">project</span><span class="o">(</span><span class="s1">&#39;:base&#39;</span><span class="o">).</span><span class="na">configurations</span><span class="o">.</span><span class="na">provided</span>
</span><span class='line'>    <span class="n">eclipse</span><span class="o">.</span><span class="na">classpath</span><span class="o">.</span><span class="na">plusConfigurations</span> <span class="o">+=</span> <span class="n">project</span><span class="o">(</span><span class="s1">&#39;:base&#39;</span><span class="o">).</span><span class="na">configurations</span><span class="o">.</span><span class="na">provided</span>
</span><span class='line'>    <span class="n">idea</span><span class="o">.</span><span class="na">module</span><span class="o">.</span><span class="na">scopes</span><span class="o">.</span><span class="na">PROVIDED</span><span class="o">.</span><span class="na">plus</span>     <span class="o">+=</span> <span class="n">project</span><span class="o">(</span><span class="s1">&#39;:base&#39;</span><span class="o">).</span><span class="na">configurations</span><span class="o">.</span><span class="na">provided</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">compile</span> <span class="nf">project</span><span class="o">(</span><span class="s1">&#39;:base&#39;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * リリース用パッケージの作成を行う。</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">task</span> <span class="nf">distribution</span><span class="o">(</span><span class="nl">dependsOn:</span> <span class="s1">&#39;jar&#39;</span><span class="o">,</span> <span class="nl">type:</span> <span class="n">Zip</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">into</span> <span class="o">(</span><span class="s1">&#39;batch/bin&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">from</span> <span class="s1">&#39;bin&#39;</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">into</span> <span class="o">(</span><span class="s1">&#39;batch/libs&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">from</span> <span class="s1">&#39;build/libs/batch.jar&#39;</span>
</span><span class='line'>            <span class="n">from</span> <span class="n">configurations</span><span class="o">.</span><span class="na">compile</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記にある distribution というタスクが新しく追加したタスクになります。
「type: Zip」という指定からもわかるように、このタスクではZIPファイルを作成します。
次に、dependsOn という指定がありますが、これは distribution タスクの実行が指定されたときに
distributionタスク実行前に実行するタスクの指定になります。
ここでは jar タスクが指定されていますので batchプロジェクトのjar ビルドが先に実行されるということになります。
そして、distribution タスク内に記述されたディレクトリ構成でZIPファイルが作成されるという仕組みです。
into というブロックの引数に ZIP ファイルのルートからのパスを記述し、
そのブロック内に from という指定でコピーするファイルを指定するという感じです。</p>

<p>上記の例で実際に作成されるZIPファイルとその中身は以下のようになります。</p>

<pre><code>batch - bin  - (batch/binに含まれているファイル。シェルスクリプト等)
        libs - batch.jar
               batchプロジェクトの依存関係となるJARファイル全て
               (configurations.compile 変数にコンパイル時に全ての依存関係ファイルへのパスが含まれている)
</code></pre>


<p>ちなみに、build/libs/batch.jar ファイルは jar タスクでビルド後に作成されるJARファイルになります。
(デフォルトだとbatchプロジェクトのディレクトリからの相対パスで build/libs/batch.jar として作成されます)
見ても判る通り、maven-assembly-pluginに比べて記述量が遥かに少ないことが判ります。
このようにしてリリース用パッケージも簡単に作ることが出来ます。</p>

<p>以上をまとめると、最終的にWARとJARおよびbatchパッケージを作成するコマンドは以下のようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">gradle</span> <span class="o">--</span><span class="n">daemon</span> <span class="n">war</span> <span class="o">:</span><span class="nl">batch:</span><span class="n">distribution</span>
</span></code></pre></td></tr></table></div></figure>




<h2>まとめ</h2>


<p>このように、Gradleだとビルドとパッケージの作成も非常に簡単にできます。
ここまでの話ですとMavenを利用する場合に比べての優位性というのは有るには有るが、敢えて移行する必要まであるか？と感じられている方は多いかも知れません。
実際Mavenでも十分な例は多いです。</p>

<p>ただ、MavenとGradleが決定的に違うところは、
前者は「<strong><font color="red">設定ファイルを記述する</font></strong>」ビルドツールであり、
後者は「<strong><font color="red">スクリプトを記述する</font></strong>」ビルドツールであることです。
つまり、後者は println を使って途中経過を出力することが可能なので、デバッグも容易です。
Mavenのように正しい設定ありきで内部の処理の動きを追えないツールと比べると大いに勝っている利点であると私は考えています。</p>

<p>また、ここまで紹介していませんでしたが、
GradleはGradle自体をインストールしていない環境でもJavaさえあれば実行できる gradlew という仕組みもあります。
これも Maven にはない大きな利点です。</p>

<p>次回はこれらの点の紹介も含めて、Gradleを利用する際によく利用するであろうTIPS集をいくつか紹介していきたいと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GradleでEclipseとIntellij IDEAの開発環境を作る]]></title>
    <link href="http://kkoudev.github.io/blog/2014/03/22/gradle_ide/"/>
    <updated>2014-03-22T01:00:00+09:00</updated>
    <id>http://kkoudev.github.io/blog/2014/03/22/gradle_ide</id>
    <content type="html"><![CDATA[<p>ちょっと前まではMavenでプロジェクトを構築している人も多かったですが、
Android StudioがGradleを採用してからはGradleによるプロジェクト構築にシフトしている人も増えてきました。
とはいえ、Web業界で古いシステムを保守・運用している方だとまだまだMavenメインの利用者が多いかと思いますので、
Mavenからの移行も含めた観点で記載して行きます。</p>

<h2>Mavenと比較したGradleの利点</h2>


<p>Mavenと比較したGradleの利点を簡単にまとめると以下のような感じです。<br>
(この記事を執筆時のGradleの最新バージョンは 1.11 です)</p>

<br>


<ul>
<li>記述量が圧倒的に少ない</li>
<li>記述言語がGroovyなのでJavaも使える。そのため比較的なんでも記述できる</li>
<li>AntやMavenの機能も利用できる。特にAntはほぼすべての機能を利用可能。MavenはMavenプラグイン以外は殆ど利用可能</li>
<li>IDE(EclipseやIntellij IDEA)の設定も細かく記述でき、そこからIDEの設定ファイルを生成できる</li>
</ul>


<br>


<p>まだまだありますが、代表的な利点はこんな感じです。</p>

<br>


<h2>プロジェクトの準備</h2>


<p>では早速ですが、各種設定をGradleで記述するための準備をしていきます。
今回の例では、以下のようなプロジェクト構成とします。</p>

<br>


<table>
<thead>
<tr>
<th align="left">プロジェクト名</th>
<th align="left">説明</th>
<th align="left">コンテキストパス</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">base</td>
<td align="left">ベースロジックを含んだJavaプロジェクト</td>
<td align="left">なし</td>
</tr>
<tr>
<td align="left">batch</td>
<td align="left">バッチシステム。baseプロジェクトを依存関係とする</td>
<td align="left">なし</td>
</tr>
<tr>
<td align="left">admin</td>
<td align="left">管理サイト。baseプロジェクトを依存関係とする</td>
<td align="left">/admin</td>
</tr>
<tr>
<td align="left">front</td>
<td align="left">ユーザが閲覧するサイト。baseプロジェクトを依存関係とする</td>
<td align="left">/</td>
</tr>
</tbody>
</table>


<br>


<p>また、各プロジェクトはMavenプロジェクトと同じで、以下のような一般的なWebアプリの構成にしておきます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>base - src - main - java
</span><span class='line'>                  - resources
</span><span class='line'>
</span><span class='line'>batch - src - main - java
</span><span class='line'>                   - resources
</span><span class='line'>
</span><span class='line'>admin - src - main - java
</span><span class='line'>                   - resources
</span><span class='line'>                   - webapp
</span><span class='line'>
</span><span class='line'>front - src - main - java
</span><span class='line'>                   - resources
</span><span class='line'>                   - webapp</span></code></pre></td></tr></table></div></figure>


<p>このディレクトリ構成にしておくと、余計な設定を記述する必要がないので便利です。<br>
そして、Gradleにおいて設定ファイルを記述する場合、「build.gradle」というファイル名で設定ファイルを作成し、
この例のように複数プロジェクトがある場合は、Gradleのサブプロジェクトという機能を利用します。
サブプロジェクト機能を利用するには、「settings.gradle」というファイルを更に用意し、
build.gradleから定数値を外部ファイルから読み込みたい場合は、gradle.propertiesというファイルを用意します。
以上を踏まえた上で、ファイルとディレクトリ構成としては以下のようになります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>project - base
</span><span class='line'>        - batch
</span><span class='line'>        - admin
</span><span class='line'>        - front
</span><span class='line'>        - build.gradle
</span><span class='line'>        - gradle.properties
</span><span class='line'>        - settings.gradle</span></code></pre></td></tr></table></div></figure>




<h2>settings.gradle の記述</h2>


<p>まず、settings.gralde を記述していきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">include</span> <span class="n">base</span>
</span><span class='line'><span class="n">include</span> <span class="n">batch</span>
</span><span class='line'><span class="n">include</span> <span class="n">admin</span>
</span><span class='line'><span class="n">include</span> <span class="n">front</span>
</span></code></pre></td></tr></table></div></figure>


<p>これは project ディレクトリをメインのプロジェクトとしており、
その配下にある include で指定したディレクトリをサブプロジェクトとして扱うという指定になります。
以下のように指定することも可能です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">include</span> <span class="n">base</span><span class="o">,</span> <span class="n">batch</span><span class="o">,</span> <span class="n">admin</span><span class="o">,</span> <span class="n">front</span>
</span></code></pre></td></tr></table></div></figure>




<h2>gradle.properties の記述</h2>


<p>以下の定数値を用意します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="c"># Mavenの自分サーバ用リポジトリ</span>
</span><span class='line'><span class="na">project.maven.repository.url</span><span class="o">=</span><span class="s">http://192.168.1.200/maven</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Javaのバージョン</span>
</span><span class='line'><span class="na">java.version</span><span class="o">=</span><span class="s">1.6</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Servletのバージョン</span>
</span><span class='line'><span class="na">servlet.version</span><span class="o">=</span><span class="s">2.5</span>
</span></code></pre></td></tr></table></div></figure>


<p>今回はこれらの値のみ外部ファイルへ記述します。</p>

<h2>build.gradle の記述</h2>


<p>それでは、メインとなる build.gradle の記述をしていきます。<br>
以下のような内容になります。<br></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Gradleによるプロジェクトビルドスクリプト。</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @author Kou</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;eclipse&#39;</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;idea&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * サブプロジェクト全体の共通設定。</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">subprojects</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;eclipse&#39;</span>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;eclipse-wtp&#39;</span>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;idea&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">maven</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">url</span> <span class="nf">getProperty</span><span class="o">(</span><span class="s1">&#39;project.maven.repository.url&#39;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">configurations</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// providedのコンパイル用ライブラリパス</span>
</span><span class='line'>        <span class="n">provided</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Javaのバージョンを指定</span>
</span><span class='line'>    <span class="n">sourceCompatibility</span> <span class="o">=</span> <span class="n">getProperty</span><span class="o">(</span><span class="s1">&#39;java.version&#39;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">targetCompatibility</span> <span class="o">=</span> <span class="n">getProperty</span><span class="o">(</span><span class="s1">&#39;java.version&#39;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">eclipse</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">classpath</span><span class="o">.</span><span class="na">defaultOutputDir</span> <span class="o">=</span> <span class="n">file</span><span class="o">(</span><span class="s1">&#39;/target/classes&#39;</span><span class="o">)</span>                <span class="c1">// クラスファイル出力先</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * ベースロジック</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">project</span><span class="o">(</span><span class="s1">&#39;:base&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// クラスパスへ provided を追加</span>
</span><span class='line'>    <span class="n">sourceSets</span><span class="o">.</span><span class="na">main</span><span class="o">.</span><span class="na">compileClasspath</span>     <span class="o">+=</span> <span class="n">configurations</span><span class="o">.</span><span class="na">provided</span>
</span><span class='line'>    <span class="n">sourceSets</span><span class="o">.</span><span class="na">test</span><span class="o">.</span><span class="na">compileClasspath</span>     <span class="o">+=</span> <span class="n">configurations</span><span class="o">.</span><span class="na">provided</span>
</span><span class='line'>    <span class="n">sourceSets</span><span class="o">.</span><span class="na">test</span><span class="o">.</span><span class="na">runtimeClasspath</span>     <span class="o">+=</span> <span class="n">configurations</span><span class="o">.</span><span class="na">provided</span>
</span><span class='line'>    <span class="n">eclipse</span><span class="o">.</span><span class="na">classpath</span><span class="o">.</span><span class="na">plusConfigurations</span> <span class="o">+=</span> <span class="n">configurations</span><span class="o">.</span><span class="na">provided</span>
</span><span class='line'>    <span class="n">idea</span><span class="o">.</span><span class="na">module</span><span class="o">.</span><span class="na">scopes</span><span class="o">.</span><span class="na">PROVIDED</span><span class="o">.</span><span class="na">plus</span>     <span class="o">+=</span> <span class="n">configurations</span><span class="o">.</span><span class="na">provided</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Java API</span>
</span><span class='line'>        <span class="n">provided</span><span class="o">(</span>
</span><span class='line'>                <span class="s1">&#39;javax.servlet:servlet-api:2.5&#39;</span><span class="o">,</span>
</span><span class='line'>                <span class="s1">&#39;javax.servlet.jsp:jsp-api:2.0&#39;</span><span class="o">,</span>
</span><span class='line'>        <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Struts</span>
</span><span class='line'>        <span class="n">compile</span><span class="o">(</span>
</span><span class='line'>                <span class="s1">&#39;taglibs:standard:1.1.2&#39;</span><span class="o">,</span>
</span><span class='line'>                <span class="s1">&#39;org.apache.struts:struts-core:1.3.10&#39;</span><span class="o">,</span>
</span><span class='line'>                <span class="s1">&#39;org.apache.struts:struts-tiles:1.3.10&#39;</span><span class="o">,</span>
</span><span class='line'>                <span class="s1">&#39;org.apache.struts:struts-taglib:1.3.10&#39;</span><span class="o">,</span>
</span><span class='line'>                <span class="s1">&#39;org.apache.struts:struts-el:1.3.10&#39;</span><span class="o">,</span>
</span><span class='line'>                <span class="s1">&#39;org.apache.struts:struts-extras:1.3.10&#39;</span><span class="o">,</span>
</span><span class='line'>        <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Solrj</span>
</span><span class='line'>        <span class="n">compile</span><span class="o">(</span>
</span><span class='line'>                <span class="s1">&#39;org.slf4j:slf4j-api:1.6.1&#39;</span><span class="o">,</span>
</span><span class='line'>                <span class="s1">&#39;org.slf4j:slf4j-log4j12:1.6.1&#39;</span><span class="o">,</span>
</span><span class='line'>                <span class="s1">&#39;org.apache.solr:solr-solrj:4.4.0&#39;</span><span class="o">,</span>
</span><span class='line'>        <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Solr Core</span>
</span><span class='line'>        <span class="n">compile</span><span class="o">(</span><span class="s1">&#39;org.apache.solr:solr-core:4.4.0&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">exclude</span> <span class="nl">group:</span> <span class="s1">&#39;org.slf4j&#39;</span><span class="o">,</span> <span class="nl">module:</span> <span class="s1">&#39;slf4j-jdk14&#39;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Test関係</span>
</span><span class='line'>        <span class="n">testCompile</span><span class="o">(</span>
</span><span class='line'>                <span class="s1">&#39;junit:junit:4.1.1&#39;</span><span class="o">,</span>
</span><span class='line'>        <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 管理サイト</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">project</span><span class="o">(</span><span class="s1">&#39;:admin&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;war&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// WARファイル名</span>
</span><span class='line'>    <span class="n">archivesBaseName</span> <span class="o">=</span> <span class="s1">&#39;admin&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// クラスパスへ provided を追加</span>
</span><span class='line'>    <span class="n">sourceSets</span><span class="o">.</span><span class="na">main</span><span class="o">.</span><span class="na">compileClasspath</span>     <span class="o">+=</span> <span class="n">project</span><span class="o">(</span><span class="s1">&#39;:base&#39;</span><span class="o">).</span><span class="na">configurations</span><span class="o">.</span><span class="na">provided</span>
</span><span class='line'>    <span class="n">sourceSets</span><span class="o">.</span><span class="na">test</span><span class="o">.</span><span class="na">compileClasspath</span>     <span class="o">+=</span> <span class="n">project</span><span class="o">(</span><span class="s1">&#39;:base&#39;</span><span class="o">).</span><span class="na">configurations</span><span class="o">.</span><span class="na">provided</span>
</span><span class='line'>    <span class="n">sourceSets</span><span class="o">.</span><span class="na">test</span><span class="o">.</span><span class="na">runtimeClasspath</span>     <span class="o">+=</span> <span class="n">project</span><span class="o">(</span><span class="s1">&#39;:base&#39;</span><span class="o">).</span><span class="na">configurations</span><span class="o">.</span><span class="na">provided</span>
</span><span class='line'>    <span class="n">eclipse</span><span class="o">.</span><span class="na">classpath</span><span class="o">.</span><span class="na">plusConfigurations</span> <span class="o">+=</span> <span class="n">project</span><span class="o">(</span><span class="s1">&#39;:base&#39;</span><span class="o">).</span><span class="na">configurations</span><span class="o">.</span><span class="na">provided</span>
</span><span class='line'>    <span class="n">idea</span><span class="o">.</span><span class="na">module</span><span class="o">.</span><span class="na">scopes</span><span class="o">.</span><span class="na">PROVIDED</span><span class="o">.</span><span class="na">plus</span>     <span class="o">+=</span> <span class="n">project</span><span class="o">(</span><span class="s1">&#39;:base&#39;</span><span class="o">).</span><span class="na">configurations</span><span class="o">.</span><span class="na">provided</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">compile</span> <span class="nf">project</span><span class="o">(</span><span class="s1">&#39;:base&#39;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">eclipse</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Dynamic Web Projectの設定</span>
</span><span class='line'>        <span class="n">wtp</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">component</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// EclipseのWTPで起動する場合のコンテキストパス</span>
</span><span class='line'>                <span class="n">contextPath</span> <span class="o">=</span> <span class="s1">&#39;/admin&#39;</span>
</span><span class='line'>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">facet</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">facet</span> <span class="nl">name:</span> <span class="s1">&#39;java&#39;</span><span class="o">,</span> <span class="nl">version:</span> <span class="n">getProperty</span><span class="o">(</span><span class="s1">&#39;java.version&#39;</span><span class="o">)</span>
</span><span class='line'>                <span class="n">facet</span> <span class="nl">name:</span> <span class="s1">&#39;jst.web&#39;</span><span class="o">,</span> <span class="nl">version:</span> <span class="n">getProperty</span><span class="o">(</span><span class="s1">&#39;java.servlet.version&#39;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * バッチ</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">project</span><span class="o">(</span><span class="s1">&#39;:batch&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// クラスパスへ provided を追加</span>
</span><span class='line'>    <span class="n">sourceSets</span><span class="o">.</span><span class="na">main</span><span class="o">.</span><span class="na">compileClasspath</span>     <span class="o">+=</span> <span class="n">project</span><span class="o">(</span><span class="s1">&#39;:base&#39;</span><span class="o">).</span><span class="na">configurations</span><span class="o">.</span><span class="na">provided</span>
</span><span class='line'>    <span class="n">sourceSets</span><span class="o">.</span><span class="na">test</span><span class="o">.</span><span class="na">compileClasspath</span>     <span class="o">+=</span> <span class="n">project</span><span class="o">(</span><span class="s1">&#39;:base&#39;</span><span class="o">).</span><span class="na">configurations</span><span class="o">.</span><span class="na">provided</span>
</span><span class='line'>    <span class="n">sourceSets</span><span class="o">.</span><span class="na">test</span><span class="o">.</span><span class="na">runtimeClasspath</span>     <span class="o">+=</span> <span class="n">project</span><span class="o">(</span><span class="s1">&#39;:base&#39;</span><span class="o">).</span><span class="na">configurations</span><span class="o">.</span><span class="na">provided</span>
</span><span class='line'>    <span class="n">eclipse</span><span class="o">.</span><span class="na">classpath</span><span class="o">.</span><span class="na">plusConfigurations</span> <span class="o">+=</span> <span class="n">project</span><span class="o">(</span><span class="s1">&#39;:base&#39;</span><span class="o">).</span><span class="na">configurations</span><span class="o">.</span><span class="na">provided</span>
</span><span class='line'>    <span class="n">idea</span><span class="o">.</span><span class="na">module</span><span class="o">.</span><span class="na">scopes</span><span class="o">.</span><span class="na">PROVIDED</span><span class="o">.</span><span class="na">plus</span>     <span class="o">+=</span> <span class="n">project</span><span class="o">(</span><span class="s1">&#39;:base&#39;</span><span class="o">).</span><span class="na">configurations</span><span class="o">.</span><span class="na">provided</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">compile</span> <span class="nf">project</span><span class="o">(</span><span class="s1">&#39;:base&#39;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * フロントサイト</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">project</span><span class="o">(</span><span class="s1">&#39;:front&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;war&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// WARファイル名</span>
</span><span class='line'>    <span class="n">archivesBaseName</span> <span class="o">=</span> <span class="s1">&#39;ROOT&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// クラスパスへ provided を追加</span>
</span><span class='line'>    <span class="n">sourceSets</span><span class="o">.</span><span class="na">main</span><span class="o">.</span><span class="na">compileClasspath</span>     <span class="o">+=</span> <span class="n">project</span><span class="o">(</span><span class="s1">&#39;:base&#39;</span><span class="o">).</span><span class="na">configurations</span><span class="o">.</span><span class="na">provided</span>
</span><span class='line'>    <span class="n">sourceSets</span><span class="o">.</span><span class="na">test</span><span class="o">.</span><span class="na">compileClasspath</span>     <span class="o">+=</span> <span class="n">project</span><span class="o">(</span><span class="s1">&#39;:base&#39;</span><span class="o">).</span><span class="na">configurations</span><span class="o">.</span><span class="na">provided</span>
</span><span class='line'>    <span class="n">sourceSets</span><span class="o">.</span><span class="na">test</span><span class="o">.</span><span class="na">runtimeClasspath</span>     <span class="o">+=</span> <span class="n">project</span><span class="o">(</span><span class="s1">&#39;:base&#39;</span><span class="o">).</span><span class="na">configurations</span><span class="o">.</span><span class="na">provided</span>
</span><span class='line'>    <span class="n">eclipse</span><span class="o">.</span><span class="na">classpath</span><span class="o">.</span><span class="na">plusConfigurations</span> <span class="o">+=</span> <span class="n">project</span><span class="o">(</span><span class="s1">&#39;:base&#39;</span><span class="o">).</span><span class="na">configurations</span><span class="o">.</span><span class="na">provided</span>
</span><span class='line'>    <span class="n">idea</span><span class="o">.</span><span class="na">module</span><span class="o">.</span><span class="na">scopes</span><span class="o">.</span><span class="na">PROVIDED</span><span class="o">.</span><span class="na">plus</span>     <span class="o">+=</span> <span class="n">project</span><span class="o">(</span><span class="s1">&#39;:base&#39;</span><span class="o">).</span><span class="na">configurations</span><span class="o">.</span><span class="na">provided</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">compile</span> <span class="nf">project</span><span class="o">(</span><span class="s1">&#39;:base&#39;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">eclipse</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Dynamic Web Projectの設定</span>
</span><span class='line'>        <span class="n">wtp</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">component</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// EclipseのWTPで起動する場合のコンテキストパス</span>
</span><span class='line'>                <span class="n">contextPath</span> <span class="o">=</span> <span class="s1">&#39;/&#39;</span>
</span><span class='line'>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">facet</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">facet</span> <span class="nl">name:</span> <span class="s1">&#39;java&#39;</span><span class="o">,</span> <span class="nl">version:</span> <span class="n">getProperty</span><span class="o">(</span><span class="s1">&#39;java.version&#39;</span><span class="o">)</span>
</span><span class='line'>                <span class="n">facet</span> <span class="nl">name:</span> <span class="s1">&#39;jst.web&#39;</span><span class="o">,</span> <span class="nl">version:</span> <span class="n">getProperty</span><span class="o">(</span><span class="s1">&#39;java.servlet.version&#39;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>基本はこれだけでOKです。
Mavenの pom.xml と比較すると記述量が大分少なくなっていることがわかります。
また、Mavenの場合は、各プロジェクトのディレクトリ配下に pom.xml を記述する必要がありましたが、
Gradleでは１つのスクリプト内にすべての設定を記述できます。(敢えて分けて記述することも出来ます)</p>

<p>では、１つ１つ解説していきます。</p>

<h3>サブプロジェクト全体の設定</h3>


<p>各サブプロジェクト全体の共通設定は subprojects というブロック内で指定します。
ここから１つ１つ見て行きましょう。</p>

<p><strong>01. プラグインの指定</strong></p>

<p>先頭に apply plugin という指定がありますが、
これはどのプラグインを利用するかという指定です。
「Javaのimportのように単純に使いたいメソッドやクラスとかを呼び出すために定義しているだけだろう」と思われる方もいるかもしれませんが、
Gradleにおいては少し意味合いが違って、<b>apply pluginを記述した段階でビルド動作に影響を与えます</b>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;eclipse&#39;</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;eclipse-wtp&#39;</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;idea&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>この４つの指定では、各サブプロジェクトが<br>
・「Javaプロジェクトである」<br>
・「Eclipseプロジェクトである」<br>
・「Eclipse WTPプロジェクトである」<br>
・「Intellij IDEAプロジェクトである」<br>
ということをGradle側へ伝えています。
この記述をすることで、各サブプロジェクトごとにEclipseやIntellij IDEAの設定ファイルを生成することが出来るようになります。</p>

<p><strong>02. providedコンパイルの設定</strong></p>

<p>「configurations」というブロックがあります。ここではプロジェクトで利用する設定パラメータを定義できます。
後述する依存関係の記述に関係しますが、providedコンパイルを実現するために、ここで provided というパラメータを宣言しています。
実は、Gradleでは Maven のような provided コンパイルの動作を標準ではサポートしていません。
とはいえ、簡単に同様の処理を実現することが出来ます。そのための準備として、ここにパラメータを宣言します。</p>

<p><strong>03. Javaのバージョンの設定</strong></p>

<p>「sourceCompatibility」「targetCompatibility」という記述がありますが、
これはビルド時に使用されるJavaのバージョン指定になります。
これを記述しない場合、インストールされているJDKのバージョンでビルドされます。
また、ここで指定したバージョンは、EclipseのJavaのバージョン指定にも利用されます。
基本的には環境依存がないようにバージョン指定をしておくことをオススメします。</p>

<p><strong>04. Eclipseでコンパイルしたクラスファイルの出力先の設定</strong></p>

<p>「eclipse」というブロック内に、「classpath.defaultOutputDir」というプロパティがあります。
ここに指定されたディレクトリにコンパイルしたクラスファイルが出力されます。
指定しない場合は、各プロジェクトのディレクトリ直下に「bin」というディレクトリが作成され、そこに出力されます。</p>

<h3>依存関係の記述</h3>


<p>今回の例では、baseプロジェクトに利用する依存関係をすべて定義し、
各サブプロジェクトにおいては base プロジェクトそのものを依存関係として定義しています。
これはGradleに詳しくない方でも上記スクリプトを見ても大体予想がついているかと思いますが、
「dependencies」という部分で定義します。
dependenciesではMavenリポジトリにあるライブラリを指定することが出来ます。
指定の形式としては、以下のようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">compile</span> <span class="s1">&#39;groupId:artifactId:version&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>groupId、artifactId、versionをコロン(:)区切りで指定します。
しかし、Servlet APIのJARなど、中にはWARビルド時にWAR内へ含めたくないライブラリもあります。
その場合は以下のような指定が必要になります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">configurations</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// providedのコンパイル用ライブラリパス</span>
</span><span class='line'>    <span class="n">provided</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">provided</span> <span class="s1">&#39;javax.servlet:servlet-api:2.5&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// クラスパスへ provided を追加</span>
</span><span class='line'><span class="n">sourceSets</span><span class="o">.</span><span class="na">main</span><span class="o">.</span><span class="na">compileClasspath</span>     <span class="o">+=</span> <span class="n">project</span><span class="o">(</span><span class="s1">&#39;:base&#39;</span><span class="o">).</span><span class="na">configurations</span><span class="o">.</span><span class="na">provided</span>
</span><span class='line'><span class="n">sourceSets</span><span class="o">.</span><span class="na">test</span><span class="o">.</span><span class="na">compileClasspath</span>     <span class="o">+=</span> <span class="n">project</span><span class="o">(</span><span class="s1">&#39;:base&#39;</span><span class="o">).</span><span class="na">configurations</span><span class="o">.</span><span class="na">provided</span>
</span><span class='line'><span class="n">sourceSets</span><span class="o">.</span><span class="na">test</span><span class="o">.</span><span class="na">runtimeClasspath</span>     <span class="o">+=</span> <span class="n">project</span><span class="o">(</span><span class="s1">&#39;:base&#39;</span><span class="o">).</span><span class="na">configurations</span><span class="o">.</span><span class="na">provided</span>
</span><span class='line'><span class="n">eclipse</span><span class="o">.</span><span class="na">classpath</span><span class="o">.</span><span class="na">plusConfigurations</span> <span class="o">+=</span> <span class="n">project</span><span class="o">(</span><span class="s1">&#39;:base&#39;</span><span class="o">).</span><span class="na">configurations</span><span class="o">.</span><span class="na">provided</span>    <span class="c1">// Eclipse用のクラスパス</span>
</span><span class='line'><span class="n">idea</span><span class="o">.</span><span class="na">module</span><span class="o">.</span><span class="na">scopes</span><span class="o">.</span><span class="na">PROVIDED</span><span class="o">.</span><span class="na">plus</span>     <span class="o">+=</span> <span class="n">project</span><span class="o">(</span><span class="s1">&#39;:base&#39;</span><span class="o">).</span><span class="na">configurations</span><span class="o">.</span><span class="na">provided</span>    <span class="c1">// Intellij IDEA用の Provided クラスパス</span>
</span></code></pre></td></tr></table></div></figure>


<p>このような指定をすることで、
依存関係をリポジトリから取得しつつも、WARには含めないようにすることが出来ます。
今回は base プロジェクトに宣言された provided な依存関係を base プロジェクトを依存関係とする各プロジェクトへ追加するため
「project(&lsquo;:base&rsquo;).configurations.provided」を追加していますが、
そのプロジェクトのみで provided の依存関係を定義する場合は「configurations.provided」を各クラスパスへ += で追加するようにしてください。</p>

<h3>WARの設定</h3>


<p>今回はTomcatを利用することを前提としていますので、
その場合の設定です。
まず、EclipseでWTPを利用する場合の設定が以下になります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">eclipse</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Dynamic Web Projectの設定</span>
</span><span class='line'>    <span class="n">wtp</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">component</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// EclipseのWTPで起動する場合のコンテキストパス</span>
</span><span class='line'>            <span class="n">contextPath</span> <span class="o">=</span> <span class="s1">&#39;/&#39;</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">facet</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">facet</span> <span class="nl">name:</span> <span class="s1">&#39;java&#39;</span><span class="o">,</span> <span class="nl">version:</span> <span class="n">getProperty</span><span class="o">(</span><span class="s1">&#39;java.version&#39;</span><span class="o">)</span>
</span><span class='line'>            <span class="n">facet</span> <span class="nl">name:</span> <span class="s1">&#39;jst.web&#39;</span><span class="o">,</span> <span class="nl">version:</span> <span class="n">getProperty</span><span class="o">(</span><span class="s1">&#39;java.servlet.version&#39;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>各ブロック名を見れば勘のいい方は大体理解できるかと思います。
Eclipseの動的Webプロジェクトの必要な設定を上記の設定で記述しています。
また、実際のWARファイル名は以下の指定になります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * フロントサイト</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">project</span><span class="o">(</span><span class="s1">&#39;:front&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;war&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// WARファイル名</span>
</span><span class='line'>    <span class="n">archivesBaseName</span> <span class="o">=</span> <span class="s1">&#39;ROOT&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここで指定された名前がWARファイル名になります。(拡張子は不要)<br>
Tomcatの場合だと、server.xmlに記述をしない場合はWARファイル名がそのままコンテキストパスになりますので<br>
(ROOTという名前は例外として / になる) ここでWARファイル名を指定します。<br></p>

<p>一見するとEclipseの方で設定しているからWARファイル名は勝手に設定してくれればいいと思う方もいるかもしれませんが、
Eclipseの設定はあくまでEclipseにおける設定なので、
実際にWARを作成時に使われる設定値ではありません。</p>

<h3>実際にIDEで読み込んでみる</h3>


<p>あとは実際にIDEでGradle Projectとしてインポートすれば完成です。<br>
Gradle Projectとしてインポートするためには、Eclipseの場合はEclipse Marketplaceにある「Gradle Integration for Eclipse」プラグインをインストールしてください。<br>
このプラグインを利用すると、リモートリポジトリから取得した依存関係の参照パスを
ローカルPCのパスとしてEclipse設定ファイルへ記述しなくなるため
Eclipseプロジェクトの設定ファイルを複数人で共有するプロジェクトにおいては最適です。</p>

<p>Gradle Integration for Eclipseプラグインをインストールしたら<br>
このプラグインのEclipse設定からソースファイルのエンコーディングの設定(-Dfile.encoding=UTF-8)を追加するのを忘れないでください。<br>
そのままだとWindowsのデフォルトエンコーディングがMS932のため問題が出ます。<br></p>

<p>Intellij IDEAにおいては、12以上のバージョンを利用している場合はJetGradleというIDEのエンジンが
build.gradleの内容を解析してプロジェクトの作成をしてくれます。<br>
ただし、Intellij IDEAのartifactsやfacetの設定はすべてを自動ではやってくれないので一部手動で行う必要があるのと、
上記で記述した provided 指定したライブラリについては、JetGradle側で export 設定を何故か行わないため<br>
ここも手動でチェックをつけてあげる必要が出てきます。<br>
13.1からは自動でartifactsやfacetも生成してくれますが、artifactsは複数プロジェクトに対応していないのかROOTコンテキストのプロジェクト分しか作成されません。<br>
Gradle側のIntellij IDEA対応はあまり熱心ではないみたいなのでこの辺はいずれ対応してくれるであろうことを期待しましょう。<br></p>

<p>【2014/04/28追記】
Intellij IDEAでartifactsが作成されない不具合がEAP版の13.1 135.760で修正されました。
早々に試したい方は<a href="http://confluence.jetbrains.com/display/IDEADEV/IntelliJ+IDEA+13.1+135.760+Release+Notes">こちら</a>からダウンロードできます。</p>

<h3>まとめ</h3>


<p>以上、早足で説明しましたが、
導入としてはこれくらいの知識があれば利用できます。
次回は実際にデプロイを行うときの手順を
Mavenからの移行の観点を交えて説明していきたいと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EXISTSとSQLの高速化について]]></title>
    <link href="http://kkoudev.github.io/blog/2013/09/14/sql/"/>
    <updated>2013-09-14T23:54:00+09:00</updated>
    <id>http://kkoudev.github.io/blog/2013/09/14/sql</id>
    <content type="html"><![CDATA[<p>SQL高速化についてはいろんなサイトで取り上げられているので
今更取り上げる必要はないかと思っていましたが、
ふと最近仕事をしている中でハマっている人が多いポイントであると感じたため
改めて書いてみることにしました。</p>

<h2>EXISTSが速いという誤解</h2>


<p>EXISTSについて書かれたサイトを見ると、
「速い」というような記述を見かけることが多いかと思います。
しかし、これはあくまでサブクエリを組んだ場合に、INやイコールを使って比較するときと比べて速い場合が多いというだけであり、
EXISTSが速いというわけでは決してありません。
ハッキリ言ってしまうと、EXISTSを使うクエリは基本的に遅いです。</p>

<p>これは正確に言うと、EXISTSを利用するケースにおいて<b>相関サブクエリ</b>が使われていることが原因で遅くなっています。
相関サブクエリとはどういうものか、以下にメンバー情報を格納した MEMBER テーブルと、
各メンバーごとのアクセスログを記録した ACCESS_LOG テーブルを例に説明してみます。</p>

<p>＜MEMBERテーブル＞</p>

<table>
<thead>
<tr>
<th align="left">カラム名</th>
<th align="left">内容</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">MEMBER_ID</td>
<td align="left">メンバーID。プライマリキー</td>
</tr>
<tr>
<td align="left">NAME</td>
<td align="left">メンバー名</td>
</tr>
</tbody>
</table>


<br>


<p>＜ACCESS_LOGテーブル＞</p>

<table>
<thead>
<tr>
<th align="left">カラム名</th>
<th align="left">内容</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">MEMBER_ID</td>
<td align="left">メンバーID。プライマリキー1</td>
</tr>
<tr>
<td align="left">DATE</td>
<td align="left">記録日時。プライマリキー2</td>
</tr>
<tr>
<td align="left">IP</td>
<td align="left">IPアドレス</td>
</tr>
</tbody>
</table>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="n">MEMBER</span><span class="p">.</span><span class="n">MEMBER_ID</span><span class="p">,</span>
</span><span class='line'>    <span class="n">MEMBER</span><span class="p">.</span><span class="n">NAME</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>    <span class="n">MEMBER</span>
</span><span class='line'><span class="k">WHERE</span>
</span><span class='line'>    <span class="k">EXISTS</span> <span class="p">(</span>
</span><span class='line'>    <span class="k">SELECT</span>
</span><span class='line'>        <span class="o">*</span>
</span><span class='line'>    <span class="k">FROM</span>
</span><span class='line'>        <span class="n">ACCESS_LOG</span>
</span><span class='line'>    <span class="k">WHERE</span>
</span><span class='line'>        <span class="n">ACCESS_LOG</span><span class="p">.</span><span class="n">MEMBER_ID</span> <span class="o">=</span> <span class="n">MEMBER</span><span class="p">.</span><span class="n">MEMBER_ID</span>  <span class="cm">/* サブクエリでメインクエリのIDを参照している */</span>
</span><span class='line'>    <span class="k">AND</span>
</span><span class='line'>        <span class="n">ACCESS_LOG</span><span class="p">.</span><span class="nb">DATE</span> <span class="o">&gt;=</span> <span class="s1">&#39;2013-08-01&#39;</span>
</span><span class='line'>    <span class="k">AND</span>
</span><span class='line'>        <span class="n">ACCESS_LOG</span><span class="p">.</span><span class="nb">DATE</span> <span class="o">&lt;</span> <span class="s1">&#39;2013-09-01&#39;</span>
</span><span class='line'>    <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のように、メインとなるクエリのIDをサブクエリで参照しているクエリを相関サブクエリと言います。
この相関サブクエリが遅い理由は、
上記でいう「<b>MEMBERテーブルのレコード数×ACCESS_LOGテーブルのレコード数</b>」の数だけ比較処理が実行されてしまうからです。
(EXISTS句を利用しているので、正確には一致するレコードが見つかればそこで比較処理は終了しますが、
見つからなかった場合は「MEMBERテーブルのレコード数×ACCESS_LOGテーブルのレコード数」の比較処理が実行されてしまいます)</p>

<p>これは各テーブルのレコード数が増えれば増えるほど、処理が一気に重くなることを示しています。
特にこの例でいうアクセスログというものは、分単位でレコードが増えるようなデータとなりますので、
システム規模が大きいとレコード数は1000万以上になることが予想されます。</p>

<p>この場合、MEMBERテーブルのレコード数が 3000 件ほどであったとしても、
アクセスログが1000万件あるとしたら、「3000×1000万＝300億」となり、膨大な数の比較を行うことになります。
300億という比較回数が重たいということは誰の目から見ても明らかでしょう。</p>

<p>EXISTS(というより相関サブクエリ)は見た目としてはわかりやすい記述ではありますが、
このようにレコードの組み合わせの数だけ比較処理が実行されてしまうため、
非常に効率が悪い処理ということになります。</p>

<h2>EXISTSをINNER JOINに置き換える</h2>


<p>これを解決するための手段が、INNER JOINへの置き換えになります。
すべてのEXISTSはINNER JOINへ置き換え可能です。(余程特殊な記述でなければ)
なぜINNER JOINへ置き換えると速くなるのかは、以下のSQL例を元に説明します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="n">MEMBER</span><span class="p">.</span><span class="n">MEMBER_ID</span><span class="p">,</span>
</span><span class='line'>    <span class="n">MEMBER</span><span class="p">.</span><span class="n">NAME</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>    <span class="n">MEMBER</span>
</span><span class='line'><span class="k">INNER</span> <span class="k">JOIN</span> <span class="p">(</span>
</span><span class='line'>    <span class="k">SELECT</span>
</span><span class='line'>        <span class="k">DISTINCT</span> <span class="n">ACCESS_LOG</span><span class="p">.</span><span class="n">MEMBER_ID</span>
</span><span class='line'>    <span class="k">FROM</span>
</span><span class='line'>        <span class="n">ACCESS_LOG</span>
</span><span class='line'>    <span class="k">WHERE</span>
</span><span class='line'>        <span class="n">ACCESS_LOG</span><span class="p">.</span><span class="nb">DATE</span> <span class="o">&gt;=</span> <span class="s1">&#39;2013-08-01&#39;</span>
</span><span class='line'>    <span class="k">AND</span>
</span><span class='line'>        <span class="n">ACCESS_LOG</span><span class="p">.</span><span class="nb">DATE</span> <span class="o">&lt;</span> <span class="s1">&#39;2013-09-01&#39;</span>
</span><span class='line'><span class="p">)</span> <span class="n">LOG_TEMP</span>
</span><span class='line'><span class="k">ON</span>
</span><span class='line'>    <span class="n">LOG_TEMP</span><span class="p">.</span><span class="n">MEMBER_ID</span> <span class="o">=</span> <span class="n">MEMBER</span><span class="p">.</span><span class="n">MEMBER_ID</span>
</span></code></pre></td></tr></table></div></figure>


<p>このクエリが先述の相関サブクエリを利用したクエリと何が違うのかと言いますと、
まず INNER JOIN の中にクエリが組まれています。
これはWHERE句に記述されたサブクエリとは違い、<b>メインクエリよりも先に実行されます</b>。
テンポラリテーブルと同じと言えばわかる人にはわかるかと思います。</p>

<p>なので、まずINNER JOINの中で、日付範囲を絞って該当するアクセスログのメンバーIDを重複を除去して取得します。
この時点で、結構な数の絞り込みが完了しています。(この1000万件が2011年からのアクセスログだとしたら、数十万件程度には絞れていることになります)
その絞り込みが完了した結果と INNER JOIN すると、相関サブクエリを利用する場合と比べて劇的に比較回数が抑えられます。</p>

<p>処理時間はサーバの処理速度にもよるのであくまで目安ですが、
先述の相関サブクエリを利用したクエリで30分〜１時間応答が返ってこなかったクエリも、
後述のINNER JOINへ置き換えた形に直すことで、１分以内に結果を取得することが出来ます。
INNER JOINの形はデータ量が増えても比較回数が増えにくいため、非常に強力です。</p>

<h2>NOT EXISTSの置き換え</h2>


<p>EXISTSについてはINNER JOINへの置き換えが可能であることがわかりましたが、
NOT EXISTSについてはどうなるでしょうか。
「存在しない」ことを調べるわけですから、互いに存在する条件で取り出すINNER JOINでは表現することが出来ません。
NOT EXISTSと同等の結果を JOIN で表現するには、
LEFT JOINで結合し、WHERE句でIDが null かどうかを判定することで NOT EXISTS と同等の判定を行うことが出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="n">MEMBER</span><span class="p">.</span><span class="n">MEMBER_ID</span><span class="p">,</span>
</span><span class='line'>    <span class="n">MEMBER</span><span class="p">.</span><span class="n">NAME</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>    <span class="n">MEMBER</span>
</span><span class='line'><span class="k">LEFT</span> <span class="k">JOIN</span> <span class="p">(</span>
</span><span class='line'>    <span class="k">SELECT</span>
</span><span class='line'>        <span class="k">DISTINCT</span> <span class="n">ACCESS_LOG</span><span class="p">.</span><span class="n">MEMBER_ID</span>
</span><span class='line'>    <span class="k">FROM</span>
</span><span class='line'>        <span class="n">ACCESS_LOG</span>
</span><span class='line'>    <span class="k">WHERE</span>
</span><span class='line'>        <span class="n">ACCESS_LOG</span><span class="p">.</span><span class="nb">DATE</span> <span class="o">&gt;=</span> <span class="s1">&#39;2013-08-01&#39;</span>
</span><span class='line'>    <span class="k">AND</span>
</span><span class='line'>        <span class="n">ACCESS_LOG</span><span class="p">.</span><span class="nb">DATE</span> <span class="o">&lt;</span> <span class="s1">&#39;2013-09-01&#39;</span>
</span><span class='line'><span class="p">)</span> <span class="n">LOG_TEMP</span>
</span><span class='line'><span class="k">ON</span>
</span><span class='line'>    <span class="n">LOG_TEMP</span><span class="p">.</span><span class="n">MEMBER_ID</span> <span class="o">=</span> <span class="n">MEMBER</span><span class="p">.</span><span class="n">MEMBER_ID</span>
</span><span class='line'><span class="k">WHERE</span>
</span><span class='line'>    <span class="n">LOG_TEMP</span><span class="p">.</span><span class="n">MEMBER_ID</span> <span class="k">is</span> <span class="k">null</span> <span class="cm">/* ACCESS_LOGに含まれないメンバーIDを調べる */</span>
</span></code></pre></td></tr></table></div></figure>


<p>この場合も、NOT EXISTSを利用する場合と比べて、
先にLEFT JOIN内のサブクエリが実行されるため(先に絞り込みを行って件数を減らした上で LEFT JOIN をしているので)高速になります。
条件がない絞り込みの場合でも、MySQLの場合であればJOINの方が最適化されやすい傾向にあるので、
その場合であってもNOT EXISTSよりも速いことが多いです。</p>

<h2>まとめ</h2>


<p>このように、普段EXISTSを始めとした相関サブクエリをさりげなく使っている場面は多いかと思いますが、
システムのデータ量が増えれば増えるほど速度低下を招くクエリであるためオススメできません。
記述的には少し記述量が増える場合もありますが、それに見合った速度を得ることが出来ますので、EXISTSは積極的にJOINへ置き換えることをお勧め致します。</p>
]]></content>
  </entry>
  
</feed>
