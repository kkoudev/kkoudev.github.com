<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Perl | 猫好きモバイルアプリケーション開発者記録]]></title>
  <link href="http://kkoudev.github.io/blog/categories/perl/atom.xml" rel="self"/>
  <link href="http://kkoudev.github.io/"/>
  <updated>2015-09-24T02:48:02+09:00</updated>
  <id>http://kkoudev.github.io/</id>
  <author>
    <name><![CDATA[kkoudev]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Imlib2とImage::Imlib2のJPEGヒント対応版を作成しました]]></title>
    <link href="http://kkoudev.github.io/blog/2014/06/15/imlib2/"/>
    <updated>2014-06-15T21:47:17+09:00</updated>
    <id>http://kkoudev.github.io/blog/2014/06/15/imlib2</id>
    <content type="html"><![CDATA[<p>久々に作ったものをGithubへ公開しました。<br>
元ネタは、よくImageMagickと比較される Imlib2 です。<br>
これのJPEGヒント対応版が欲しくなったので探したのですが、どこにも見当たらなかったのでいっそのこと自分で作りました。<br>
(対応については<a href="http://labs.edge.jp/smalllight/">SmallLight</a>のソースを参考にさせて頂きました)<br></p>

<h2>JPEGヒント(scale denom)とは</h2>


<p>まずJPEGヒントとは何かというと、ImageMagickやImlib2で利用しているlibjpeg ver.7以降で利用することの出来る scale_denom というスケーリング手法の俗称です。<br>
これは簡単に言うと予めリサイズ後のサイズがわかっている場合に、元画像ロード時にメモリを効率よく確保しつつリサイズを高速化する手法です。<br>
ImageMagickではこの機能をサポートしており、「-define jpeg:size=640x480」といったオプションをつけることで利用することができます。<br>
よく「ImageMagickは遅い」と言われるのですが、このJPEGヒントを利用することで10倍近くの高速化が測れます。<br></p>

<p>ところが、Imlib2にはこのオプションが存在せず、APIにもそれをサポートしたものがありません。
APIの設計上、JPEGのみに特化した設計にはなっていないというのも理由の１つかも知れませんが、
JPEGヒントがないImlib2は単純なリサイズですとJPEGヒントを利用したImageMagickと同等か少し遅くなってしまうため、ベースの速度が速いのにこのままでは非常に勿体ないわけです。<br></p>

<h2>JPEGヒントをサポートしたImlib2の利用</h2>


<p>そこで今回、Imlib2を拡張してJPEGヒントが利用できるように実装しました。<br>
実際に利用する場合はPerlのライブラリであるImage::Imlib2を経由して利用します。<br>
このImage::Imlib2もJPEGヒントに対応させるために少し拡張しております。<br>
実際の利用イメージとしては以下のような感じです。<br></p>

<p>``` perl
use Image::Imlib2;</p>

<h1>元サイズ1920x1200の画像を使用</h1>

<p>my $scaledImage = Image::Imlib2->load_scale(&lsquo;sample.jpg&rsquo;, 640, 480);
$scaledImage = $scaledImage->create_scaled_image(640, 480);
$scaledImage->set_quality(100);
$scaledImage->save(&lsquo;sample_resized.jpg&rsquo;);
```</p>

<p>「load_scale」というメソッドを追加しており、これを利用することでロード時にリサイズ後のサイズを指定します。
あとは普通にリサイズして書き出してみます。
これだけで、このサイズの場合は元のJPEGヒントを利用しない場合に比べて 1.5 倍ほど高速化しております。</p>

<h2>チューニング対応したImageMagickとの比較</h2>


<p>それでは、ImageMagickと速度比較してみます。<br>
対等に比較を行うために、まずImageMagickの高速化を図ります。<br>
具体的には、以下のオプションを指定して予めコンパイルしておきます。<br></p>

<h3>01. 高速化のためのImageMagickのコンパイルオプション</h3>


<p>01. &mdash;disable-openmp を指定してOpenMPを無効にする<br>
→これが有効になっていると、マルチスレッド実行時に異常にメモリを消費して重くなる<br></p>

<p>02. &mdash;with-quantum-depth=8 を指定してRPG分解能を 8 bitにする。<br>
→通常はこれで十分に24/32 bitの画像を処理できます。この指定をしなくても、convert 実行時に -depth 8 をオプションとして渡してもOK<br></p>

<p>特に 01 が重要になります。<br>
画像のサムネイル作成を高速化する場合、最初に出てくる発想としてはマルチスレッドで実行することがあげられますが、
OpenMPはそのマルチスレッドによる実行時に異常な負荷をあげる原因となっているからです。
02は -depth 8 を convert 実行時に指定しても良いと思いますが、コマンド実行時に特に意識させずに高速化したいのであればコンパイル時に指定してしまいましょう。</p>

<h3>02. libjpeg-turboの導入</h3>


<p>ImageMagickもImlib2も通常はlibjpegを利用しますが、このlibjpegよりも更に高速に処理ができる libjpeg-turbo というライブラリがあります。
これを利用することで更に 1.3 倍ほど高速になります。
導入方法は簡単で、<a target="_blank" href="http://sourceforge.net/projects/libjpeg-turbo/files/">こちら</a>より最新版のRPMをダウンロードしてインストールします。
すると、/opt 配下へインストールされますので、以下のようにして共有ライブラリファイルとして認識させます。</p>

<p><code>bash
echo /opt/libjpeg-turbo/lib64 &gt; /etc/ld.so.conf.d/libjpeg-turbo.conf
ldconfig
</code></p>

<p>これでインストール済みのImageMagickとImlib2が libjpeg-turbo の方を利用するようになります。</p>

<h3>03. 実効速度の比較</h3>


<p>準備が完了したところで、実効速度を比較してみます。<br>
今回の検証では 1920x1200 のJPEG画像を 640x480 へ 1000 回リサイズした場合の速度差を比較しています。<br>
具体的には以下の内容のシェルスクリプトを作成して速度比較してみました。<br></p>

<p>＜ImageMagick＞
``` bash</p>

<h1>!/bin/bash</h1>

<p>time /bin/bash &lt;&lt; TIMEEND
for (( i = 0; i &lt; 1000; i++ ))
do</p>

<pre><code>convert -define jpeg:size=640x480 -quality 100 -scale 640x480 sample.jpg sample_resized.jpg
</code></pre>

<p>done
TIMEEND
```</p>

<p>＜Imlib2＞<br>
シェルスクリプトから呼び出すPerlスクリプト (resize.pm とします)
``` perl</p>

<h1>!/usr/bin/env perl</h1>

<p>use strict;
use Image::Imlib2;</p>

<p>my $scaledImage = Image::Imlib2->load_scale(&lsquo;sample.jpg&rsquo;, 640, 480);
$scaledImage = $scaledImage->create_scaled_image(640, 480);
$scaledImage->set_quality(100);
$scaledImage->save(&lsquo;sample_resized.jpg&rsquo;);
```</p>

<p>実行するシェルスクリプト
``` bash</p>

<h1>!/bin/bash</h1>

<p>time /bin/bash &lt;&lt; TIMEEND
for (( i = 0; i &lt; 1000; i++ ))
do</p>

<pre><code>`dirname $0`/resize.pm
</code></pre>

<p>done
TIMEEND
```</p>

<h3>結果</h3>


<p>＜ImageMagick＞
<code>bash
real    1m12.344s
user    0m58.140s
sys     0m8.317s
</code></p>

<p>＜Imlib2＞
<code>bash
real    0m52.510s
user    0m36.622s
sys     0m9.565s
</code></p>

<p>チューニングしたImageMagickと比較しても、JPEGヒントを利用したImlib2はかなり速いことがわかります。
画質についても素人目には違いが判りません。</p>

<h2>まとめ</h2>


<p>Imlib2はこのように速度が非常に速いことが利点ですが、
欠点としてはWindowsやMacへ導入するとなると少々面倒くさいので、開発時のデバッグが容易に出来ません。(その点、ImageMagickは簡単に導入できます)
また、GIF画像の書き出しもサポートしていないので、GIF画像を扱う必要がある場合はImageMagickと併用するなどして対応する必要があります。
そのため、GIF以外の画像(特にJPEG画像)を多く扱い、速度を追求する必要が有る場合はImlib2の利用をお勧めします。</p>

<p>開発時にWindowsやMacで利用する場合は頑張ってImlib2をインストールするのもありですが、
どちらかといえばImageMagickとImlib2を同じインターフェースで利用出来るクラスを作成して、環境ごとに切り替えする方がいいかもしれません。
これについてはJavaのクラスとして近々作成予定ですので、完成次第展開いたします。</p>

<p>今回作成したJPEGヒント対応版のImlib2とImage::Imlib2については以下よりダウンロードしてください。<br></p>

<p><a target="_blank" href="https://github.com/kkoudev/imlib2">Imlib2</a><br>
<a target="_blank" href="https://github.com/kkoudev/Image-Imlib2">Image::Imlib2</a><br></p>
]]></content>
  </entry>
  
</feed>
