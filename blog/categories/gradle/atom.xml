<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gradle | 猫好きモバイルアプリケーション開発者記録]]></title>
  <link href="http://kkoudev.github.io/blog/categories/gradle/atom.xml" rel="self"/>
  <link href="http://kkoudev.github.io/"/>
  <updated>2015-09-24T18:06:25+09:00</updated>
  <id>http://kkoudev.github.io/</id>
  <author>
    <name><![CDATA[kkoudev]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Intellij IDEA 13.1.4においてGradleのWebリソースディレクトリがクリアされてしまう不具合]]></title>
    <link href="http://kkoudev.github.io/blog/2014/08/04/gradle-idea-bug/"/>
    <updated>2014-08-04T23:24:24+09:00</updated>
    <id>http://kkoudev.github.io/blog/2014/08/04/gradle-idea-bug</id>
    <content type="html"><![CDATA[<p>Intellij IDEA 13.1.4においてGradleプラグインのデグレが発生しました。<br>
内容としては、マルチプロジェクトを利用している場合にWARプロジェクトのWebリソースディレクトリ(ex. src/main/webapp) が
1つのプロジェクトを除いて全てクリアされてしまうというものです。
13.1がリリースされたばかりのときに同じようにArtifactsが 1 つのプロジェクト分しか作成されないという不具合がありましたが、
今回はこれのWebリソースディレクトリ版の不具合といったところです。</p>

<p>手動で設定すれば動くようになるけど、再度Gradleプロジェクトのリフレッシュをするとまたしてもクリアされてしまうという酷いもの。
さすがにこれでは使い物にならないので、バグ報告をしたところ数週間経ってようやく修正されました。
13.1.5にて修正版が反映されるようですが、13.1.4の状態でも以下のファイルを反映することでこの不具合が解消されます。</p>

<p>＜修正パッチ＞<br>
<a href="http://youtrack.jetbrains.com/_persistent/ij13-gradle-fix.zip?file=74-179766&v=0&c=true">ここからダウンロード</a></p>

<p>このファイルをダウンロードし、
<code>
(Intellij IDEA 13のインストール先)/plugins/gradle/lib
</code>
上記ディレクトリへコピーすることで解消されます。<br></p>

<p>これで問題なく動作することを確認できましたが、
どうもIntellij IDEAのGradle機能はデグレが多いのと、マルチプロジェクトについては毎回動作確認をしていないと思わせるような印象があります…。
今後はこのようなクリティカルな不具合がないことを期待したいところです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle 1.xから2.0へ移行する際に気をつけるべき変更点]]></title>
    <link href="http://kkoudev.github.io/blog/2014/07/13/gradle-v2/"/>
    <updated>2014-07-13T02:24:24+09:00</updated>
    <id>http://kkoudev.github.io/blog/2014/07/13/gradle-v2</id>
    <content type="html"><![CDATA[<p>7/1にGradle 2.0がリリースされました。<br>
複数の非推奨メソッドの削除が行われたため、
1.xで動作していたものが、2.0から動かなくなるケースが出てきました。
全てのケースを紹介しているとキリがないので、
今回は特に大きいと思われる 2 点の変更点のみ紹介させて頂きます。</p>

<h2>変数の直接宣言の非サポート</h2>


<p>これは1.10くらいのときから警告が出るようになっていましたが、
具体的には以下のように変数を宣言するのが無効になりました。</p>

<p><code>groovy
project.myProperty = 'some value'
assert myProperty == 'some value'
</code></p>

<p>これを解決するには、 extの名前空間で囲むか、defキーワードを指定してローカル変数として宣言します。</p>

<p>```groovy
// ローカル変数として定義するか
def myProperty = &lsquo;some value&rsquo;
assert myProperty == &lsquo;some value&rsquo;</p>

<p>// extの名前空間内で宣言するか
ext.myProperty == &lsquo;some value&rsquo;
assert myProperty == &lsquo;some value&rsquo;
```</p>

<h2>EclipseとIntellij IDEAでprovidedな依存関係指定時の変更</h2>


<p>provided指定の方法は以前の記事でも何度か紹介させて頂きましたが、
以前までは以下のように指定していました。</p>

<p><code>groovy
eclipse.classpath.plusConfigurations += project(':base').configurations.provided
idea.module.scopes.PROVIDED.plus     += project(':base').configurations.provided
</code></p>

<p>1.xまではこのままでよかったのですが、
2.0からは += 演算子で configurations の指定を追加する場合、
以下のように指定します。</p>

<p><code>groovy
eclipse.classpath.plusConfigurations += [project(':base').configurations.provided]
idea.module.scopes.PROVIDED.plus     += [project(':base').configurations.provided]
</code></p>

<p>1.xでもこの指定で動作するので、1.xをまだ利用している場合でもこちらの指定に変更するべきでしょう。
これについては、2.0ではタスク実行時に「You can&rsquo;t change configuration &lsquo;(追加変数名)&rsquo; because it is already resolved!」
といったようなエラーメッセージが表示されるようになりましたので、
このエラーが表示されたら上記記載に変更してみましょう。</p>

<h2>まとめ</h2>


<p>今回は1.xから2.0へ移行する際にハマるであろうポイントのみ紹介させて頂きました。<br>
リリースノートにはもっと詳細に紹介されていますので、
詳しい内容については<a target="_blank" href="http://www.gradle.org/docs/current/release-notes">こちら</a>をご覧ください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradleでリソースファイルをフィルタリングする場合の注意点]]></title>
    <link href="http://kkoudev.github.io/blog/2014/05/26/gradle-filtering-resources/"/>
    <updated>2014-05-26T01:39:26+09:00</updated>
    <id>http://kkoudev.github.io/blog/2014/05/26/gradle-filtering-resources</id>
    <content type="html"><![CDATA[<p>Gradleでリソースファイルのフィルタリングを行う例は検索サイトで調べると結構多くヒットするかと思います。
ですが、その殆どが今回紹介する注意点について考慮されていないスクリプト記述をしています。
具体的に何を注意しなければならないのでしょうか。
以下にリソースフィルタリングの例を紹介します。</p>

<h3>問題となるスクリプト</h3>


<p>``` groovy
/<em>*
 * ベースロジック
 </em>/
project(&lsquo;:base&rsquo;) {</p>

<pre><code>apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'


processResources {

    from(sourceSets.main.resources.srcDirs) {

        // トークンを置換する
        filter(
            org.apache.tools.ant.filters.ReplaceTokens,
            tokens: [
                'version': '1.0.0',
                'db_ip': '127.0.0.1'
            ]
        )

    }

}
</code></pre>

<p>}
```</p>

<p>上記のスクリプトは、baseプロジェクトに含まれるリソースファイル(JARやWARに含まれるソースコード以外のファイル)に対して
「@version@」と「@db_ip@」の指定が含まれていた場合にそれぞれを指定の値に置換するという指定です。<br>
一見これは上手く動作しますし、問題ないケースもあります。</p>

<p>しかし、この指定は見ての通り<strong><font color="red">リソースファイル全てに対して行われれます</font></strong>。<br>
これはどういうことなのかというと、リソースファイルがテキストファイルであれば何ら問題はないのですが、
バイナリファイルが含まれているとそれすらも置換対象となってしまうのです！</p>

<p>例えばWebサイトシステムでは、ExcelファイルのテンプレートとなるExcelを予めJARやWARに含めて、
それをプログラム内で利用するケースがよくあるかと思います。
その場合、リソースファイルであるExcelファイルすらも置換対象となり、<strong><font color="red">ファイルが盛大に壊れます</font></strong>。
Mavenでフィルタリングを行うときはバイナリファイルは対象外となるため、それを期待して利用するととんでもない目に遭うわけです。</p>

<h2>解決方法</h2>


<p>解決策としては、以下のように対象となる拡張子を指定することで回避します。
gradle.propertiesに拡張子を定義しておくと管理しやすいです。</p>

<p>[gradle.properties]
```</p>

<h1>カンマ区切りで定義しておく</h1>

<p>replace.extensions=xml,conf,dicon
```</p>

<p>[build.gradle]
``` groovy
/<em>*
 * ベースロジック
 </em>/
project(&lsquo;:base&rsquo;) {</p>

<pre><code>apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'


processResources {

    // フィルタ対象リソース拡張子分繰り返す
    getProperty('replace.extensions').tokenize(',').each {

        // 対象ファイルの場合
        filesMatching("**/*.$it") {

            // トークンを置換する
            filter(
                org.apache.tools.ant.filters.ReplaceTokens,
                tokens: [
                    'version': '1.0.0',
                    'db_ip': '127.0.0.1'
                ]
            )

        }

    }

}
</code></pre>

<p>}
```</p>

<p>filesMatchingを利用するのがミソになります。
拡張子を build.gradle へ直接記載する場合は以下のような書き方でも動作します。</p>

<p>``` groovy
/<em>*
 * ベースロジック
 </em>/
project(&lsquo;:base&rsquo;) {</p>

<pre><code>apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'


processResources {

    from(sourceSets.main.resources.srcDirs) {

        // 対象拡張子のみコピー
        include 'xml'
        include 'conf'
        include 'dicon'

        // トークンを置換する
        filter(
            org.apache.tools.ant.filters.ReplaceTokens,
            tokens: [
                'version': '1.0.0',
                'db_ip': '127.0.0.1'
            ]
        )

    }

    // 残りのファイルをコピー
    from(sourceSets.main.resources.srcDirs) {

        exclude 'xml'
        exclude 'conf'
        exclude 'dicon'

    }

}
</code></pre>

<p>}
```</p>

<p>ただ、この書き方は推奨いたしません。
なぜなら、上記の拡張子指定を動的記述すると上手く動作しないためです。
せっかくなので紹介しておきます。</p>

<h3>悪い例</h3>


<p>※ replace.extensions が gradle.properties に定義されていることとする
``` groovy
/<em>*
 * ベースロジック
 </em>/
project(&lsquo;:base&rsquo;) {</p>

<pre><code>apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'


processResources {

    from(sourceSets.main.resources.srcDirs) {

        // フィルタ対象リソース拡張子分繰り返す
        getProperty('replace.extensions').tokenize(',').each {

            // 対象拡張子のみコピー
            include it

        }

        // トークンを置換する
        filter(
            org.apache.tools.ant.filters.ReplaceTokens,
            tokens: [
                'version': '1.0.0',
                'db_ip': '127.0.0.1'
            ]
        )

    }

    // 残りのファイルをコピー
    from(sourceSets.main.resources.srcDirs) {

        // フィルタ対象リソース拡張子分繰り返す
        getProperty('replace.extensions').tokenize(',').each {

            // 対象拡張子のみ除外
            exclude it

        }

    }

}
</code></pre>

<p>}
```</p>

<p>これだと同じ拡張子を指定しているにも関わらず、上手く動作しません。<br>
どうやら processResources において from 指定を行う場合、
同じパスに対して include と exclude の指定が被ると上手く動作せず、リソースファイルが全てJARやWARから消失します。
(ただし、直接記述すると何故か期待通りに動作する)
おそらく動的記述した場合と静的記述した場合でスクリプトの解釈順に違いが出るのだと思いますが、
無理に考えても仕方ないのでこの書き方はやめましょう。</p>

<h2>まとめ</h2>


<p>Gradleは便利ですが、Mavenのときと同じ挙動を期待するとこのような思わぬ落とし穴があります。
processResourcesでフィルタリングを行う場合は filesMatching、またはfilesNotMatching を利用し、対象ファイルの拡張子を限定してからフィルタリングするようにしましょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradleで陥りやすい問題点の解決策TIPS集]]></title>
    <link href="http://kkoudev.github.io/blog/2014/03/30/gradle-tips/"/>
    <updated>2014-03-30T22:45:00+09:00</updated>
    <id>http://kkoudev.github.io/blog/2014/03/30/gradle-tips</id>
    <content type="html"><![CDATA[<p>今回はGradleでよくハマるであろうポイントを集めたTIPSを11個紹介します。</p>

<h2>01. 依存関係のバージョンが指定されたものにならない</h2>


<p>MavenからGradleへ移行した場合、おそらく誰もが最初に陥る問題かと思います。
端的に言うと、Mavenの pom.xml で指定したままの依存関係の設定をそのまま build.gradle へ移したとしても
最終的に取得される依存関係は殆どのケースで同じにはなりません。
これは「<strong>推移的依存関係</strong>」によって同じライブラリが存在した場合に優先されるバージョンがMavenとGradleでは異なるために起こります。</p>

<p>推移的依存関係とは簡単に説明すると、ある依存関係がさらに依存する関係のことを言います。
MavenでもGradleでもそれらを自動的に取得しようとしますが、
それらの中で使っている依存関係のgroupIdもartifactIdも同じだがバージョンが異なる場合、
Javaでは同じライブラリの異なるバージョンを同じアプリ内へ共存させることが出来ませんから、
どちらかを優先させる必要が出てきます。</p>

<p>Mavenの場合は推移的依存関係における階層が高い方が優先されます。
しかしGradleでは、<strong><font color="red">バージョンが一番高いものが優先されます。</font></strong>
そのため、Gradleでは利用しない依存関係をひたすら exclude 指定で除外していく必要が出てきます。</p>

<p>MavenからGradleへ移行する場合に依存関係のバージョンを含めて全く同じにしたい場合は、
以下のように現在の依存関係の階層構造を出力してそれを比較して合わせていけばよいです。</p>

<p>＜Mavenで依存関係階層構造を出力＞
``` bash</p>

<h1>対象となるプロジェクトの pom.xml のあるディレクトリへ移動して実行</h1>

<p>mvn dependency:tree
```</p>

<p>＜Gradleで依存関係階層構造を出力＞
``` bash</p>

<h1>baseプロジェクトの依存関係階層構造を出力する</h1>

<p>gradle :base:dependencies
```</p>

<p>とはいえ、これがとにかく面倒です。
例えば自身で dependencies ブロックへ指定した依存関係が他の依存関係の推移的依存関係になっている場合、
exclude指定を行っても一見除去されないように見えたり(or 指定したバージョンにならなかったり)と、結構ハマります。
根気よく exclude 指定で不要なバージョンを除去して合わせていきましょう。</p>

<h2>02. EclipseのWTPで起動した場合に他のプロジェクトを参照しているとその参照しているプロジェクトの依存関係を読み込まない</h2>


<p>これも人によってはハマるポイントかと思います。
Eclipse上ではコンパイルエラーが出ていないのに、WTPでTomcatを起動すると参照しているプロジェクトの依存関係が無いと言われてしまう(ClassNotFoundExceptionが発生してしまう)現象です。
これは eclipse-wtp のプラグインの読み込み指定を行っていない場合に起こります。
どういうことなのかと言いますと、この例が起こるのは以下のように build.gradle を記述したときに起こります。</p>

<p>``` groovy
/<em>*
 * Gradleによるプロジェクトビルドスクリプト。
 *
 * @author Kou
 </em>/
apply plugin: &lsquo;eclipse&rsquo;
apply plugin: &lsquo;idea&rsquo;</p>

<p>/<em>*
 * ベースロジック
 </em>/
project(&lsquo;:base&rsquo;) {</p>

<pre><code>apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'

dependencies {

    // Struts
    compile(
            'taglibs:standard:1.1.2',
            'org.apache.struts:struts-core:1.3.10',
            'org.apache.struts:struts-tiles:1.3.10',
            'org.apache.struts:struts-taglib:1.3.10',
            'org.apache.struts:struts-el:1.3.10',
            'org.apache.struts:struts-extras:1.3.10',
    )

    // Solrj
    compile(
            'org.slf4j:slf4j-api:1.6.1',
            'org.slf4j:slf4j-log4j12:1.6.1',
            'org.apache.solr:solr-solrj:4.4.0',
    )

    // Solr Core
    compile('org.apache.solr:solr-core:4.4.0') {
        exclude group: 'org.slf4j', module: 'slf4j-jdk14'
    }

    // Test関係
    testCompile(
            'junit:junit:4.1.1',
    )

}
</code></pre>

<p>}</p>

<p>/<em>*
 * 管理サイト
 </em>/
project(&lsquo;:admin&rsquo;) {</p>

<pre><code>apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'eclipse-wtp'
apply plugin: 'war'

// WARファイル名
archivesBaseName = 'admin'

dependencies {

    compile project(':base')

}

eclipse {

    // Dynamic Web Projectの設定
    wtp {

        component {

            // EclipseのWTPで起動する場合のコンテキストパス
            contextPath = '/admin'

        }

        facet {

            facet name: 'java', version: getProperty('java.version')
            facet name: 'jst.web', version: getProperty('java.servlet.version')

        }

    }

}
</code></pre>

<p>}
```
上記の例では、base プロジェクトに eclipse-wtp の指定がないことがわかります。
EclipseのWTPで起動するのは WAR プロジェクトのみです。
そのため、base プロジェクトのような通常のJavaプロジェクトは eclipse-wtp とは関係ないだろうと思いがちなのですが、
ここが落とし穴で、依存関係となるプロジェクトも含めて eclipse-wtp のプラグイン指定を行わないと、
たとえEclipse上でコンパイルエラーが出ていなくてもWTP起動時に読み込みの対象とならないのです。
なので、EclipseのWTPで起動させる場合は必ず WAR プロジェクト以外のプロジェクトにも eclipse-wtp のプラグインを読み込むよう指定してください。
(subprojects のブロックで指定すれば各プロジェクトごとにいちいち指定する必要がなくなるので記述量が減ります)</p>

<h2>03. プロパティの参照が出来ない場合がある</h2>


<p>主にGradleで利用するプロパティは gradle.properties に記述する方法や、
コマンド実行時に -P オプションで指定するのが一般的です。
そのプロパティをスクリプト内で参照する場合、以下の 2 つの参照方法があります。</p>

<p>1. プロパティ名の先頭に $ をつけてダブルクォーテーションで囲む<br>
2. getPropertyメソッドにプロパティ名を指定して取得する<br></p>

<p>記述が短いので $ をつけて参照する方法を選んでしまいがちですが、
以下のようにドットやハイフンを含むプロパティ名の場合は参照できません。</p>

<pre>
× java.version=1.6
× java-version=1.6
○ java_version=1.6
</pre>


<p>これは Bash をはじめとしたシェルスクリプトの変数と同じ仕様です。
Javaのpropertiesファイルは慣例的にドット区切りでプロパティ名を記述する傾向があります。
なので少なからずこの問題に陥る方もいらっしゃるかと思います。</p>

<p>じゃあ、ドットやハイフンを使った名前は利用できないのか？というと、そういうわけではありません。
上記の 2 の方法である getPropertyメソッドを利用すればドットやハイフンを含んだプロパティ名を参照できます。</p>

<p>そのため、私が普段スクリプトを記述する場合は、
コマンド実行時に -P オプションで指定したプロパティは 1 の方法で参照するようにし、
gradle.properties で指定されたプロパティは 2 の方法で参照するように区別しています。
その方がスクリプトを見たときにどこから指定されたプロパティを参照しようとしているのかが判断しやすいです。</p>

<h2>04. hasPropertyメソッドが常に false を返してしまう</h2>


<p>これもGradle初心者は陥りやすいかと思います。
-P オプションでプロパティを指定している場合で、
かつそのプロパティが必須ではない場合、プロパティの有無をスクリプト内で判断しないとエラーになってしまいます。
そこで、以下のように書いてみます。</p>

<p>``` groovy
def     test</p>

<p>// 使用するプロファイル名が指定されている場合
if (hasProperty(&lsquo;propertyTest&rsquo;)) {</p>

<pre><code>// 使用するプロファイル名を設定する
test = "$propertyTest"
</code></pre>

<p>} else {</p>

<pre><code>// デフォルトのプロファイル名を設定する
test = 'defaultTest'
</code></pre>

<p>}
```</p>

<p>この場合、常に hasProperty メソッドは失敗してしまいます。
hasPropertyメソッドを何も指定せずに呼び出すと TaskのhasPropertyメソッドがコールされてしまい、
実際にプロジェクトに設定されたプロパティを判断できなくなる場合があります。
そこで、以下のように指定すると正常に判定することが出来ます。</p>

<p>``` groovy
def     test</p>

<p>// 使用するプロファイル名が指定されている場合
if (project.hasProperty(&lsquo;propertyTest&rsquo;)) {</p>

<pre><code>// 使用するプロファイル名を設定する
test = "$propertyTest"
</code></pre>

<p>} else {</p>

<pre><code>// デフォルトのプロファイル名を設定する
test = 'defaultTest'
</code></pre>

<p>}
```</p>

<p>上記のように「project.hasProperty」をコールすることで正常にプロパティ有無を判定することが出来るようになります。</p>

<h2>05. 環境ごとにリソースファイルを切り替えたい</h2>


<p>Mavenでは使用するリソースファイルを複数指定することが可能で、
更にはビルド時にプロファイルを指定することでそれを環境ごとに切り替えることが出来ます。
これをGradleで実現するには様々な方法がありますが、ここでは私が普段利用しているスクリプト例を紹介します。</p>

<p>``` groovy
/<em>*
 * Gradleによるプロジェクトビルドスクリプト。
 *
 * @author Kou
 </em>/
apply plugin: &lsquo;eclipse&rsquo;
apply plugin: &lsquo;idea&rsquo;</p>

<p>/<em>*
 * サブプロジェクト全体の共通設定。
 *
 </em>/
subprojects {</p>

<pre><code>apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'

sourceSets {

    def     useProfileName     // 指定環境名称

    // 使用するプロファイル名が指定されている場合
    if (project.hasProperty('profileName')) {

        // 使用するプロファイル名を設定する
        useProfileName = "$profileName"

    } else {

        // デフォルトのプロファイル名を設定する
        useProfileName = 'local'

    }


    // メインリソースの指定
    main.resources {

        srcDirs 'src/main/resources'
        srcDirs "src/profile.$useProfileName/resources"

    }

}

eclipse {

    classpath.defaultOutputDir = file('/target/classes')                // クラスファイル出力先

}
</code></pre>

<p>}
```</p>

<p>上記の「sourceSets」のブロック内がリソースを環境ごとに切り替える処理になります。
この build.gradle のプロジェクト設定は前回も紹介したとおりIDEでも利用される設定となります。
そのため、ここでは環境指定が無い場合はローカル環境の設定であるものと見なしています。</p>

<p>では、他の環境指定を行うにはいつ行えばいいのかというと、これはビルド時に指定します。
WARやJARのビルドを行うときに -P オプションでプロパティを与えて読み込む環境を指定します。</p>

<p><code>groovy
gradle --daemon -PprofileName=development war
</code></p>

<p>こうすることで、「src/main/resources」「src/profile.development/resources」ディレクトリにあるリソースファイルが
WARに追加されるようになります。</p>

<h2>06. testCompileで依存関係となるプロジェクトを指定した場合にそのプロジェクトの testCompile を参照してくれない</h2>


<p>これはどうやら仕様(？)のようで、
compileの場合は「compile project(&lsquo;:base&rsquo;)」といったようにプロジェクトを指定するとその指定したプロジェクトの依存関係を継承しますが、
testCompileの場合は「testCompile project(&lsquo;:base&rsquo;)」と指定しても、どういうわけか継承しないようです。
この問題に対するスマートな解決方法というのは現時点ではあまりないのですが、
強いてあげるとすれば、以下のように各プロジェクトごとに testCompile の依存関係を指定してあげることで
ある程度管理しやすくなります。</p>

<p>``` groovy
/<em>*
 * Gradleによるプロジェクトビルドスクリプト。
 *
 * @author Kou
 </em>/
apply plugin: &lsquo;eclipse&rsquo;
apply plugin: &lsquo;idea&rsquo;</p>

<p>/<em>*
 * 依存関係を定義する
 </em>/
ext {</p>

<pre><code>libs = {

    // テストで利用する依存関係
    testCompile: [
        'junit:junit:4.4',
        'org.easymock:easymock:3.2',
        'org.hamcrest:hamcrest-all:1.3',
    ],

}
</code></pre>

<p>}</p>

<p>/<em>*
 * ベースロジック
 </em>/
project(&lsquo;:base&rsquo;) {</p>

<pre><code>dependencies {

    // Test関係
    testCompile libs.testCompile

}
</code></pre>

<p>}</p>

<p>/<em>*
 * 管理サイト
 </em>/
project(&lsquo;:admin&rsquo;) {</p>

<pre><code>apply plugin: 'war'

// WARファイル名
archivesBaseName = 'admin'

dependencies {

    compile project(':base')

    // Test関係
    testCompile libs.testCompile

}
</code></pre>

<p>}
```</p>

<p>このように、拡張プロパティでテストの依存関係をまとめた変数を宣言し、
そこに利用する依存関係を全て記述すれば比較的管理のしやすい記述ができます。
これについてはもっとスマートな記述方法が今後登場しましたらそのときに再度紹介させていただきます。</p>

<h2>07. EclipseのWTPを利用している場合に provided や providedCompile の指定が効かない</h2>


<p>これは以前紹介させて頂いたEclipseのGradleプラグインである「Gradle Integration for Eclipse」のプラグインの仕様のようで、
このプラグインは自前で作成した provided の指定やWARプラグインを指定した場合のみ利用できる providedCompile の指定をしたとしても、
WTPでAPサーバを起動したときに WEB-INF/lib のディレクトリへ強制的に全ての依存関係ライブラリがコピーされてしまいます。要は provided であることを考慮してくれません。
この問題に対する公式な解決方法としては、Eclipseの設定から「Gradle」→「WTP」を選択し、そこに除去するプラグインを記述すれば WEB-INF/lib ディレクトリへコピーされなくなる、とのことです。
せっかくGradleを利用しているのに手動で設定するという点からもなんとも腑に落ちないですが…現状このプラグインを利用している以上はこうするしかないようです。</p>

<p>もう１つの解決策としては、「Gradle Integration for Eclipse」プラグインでインポートせず、
「gradle eclipse」コマンドを自前で実行してEclipseのプロジェクト設定ファイルを作成し、
作成後のプロジェクトをインポートするという方法です。
この方法であれば provided も考慮してプロジェクト設定を作成してくれます。
ただし、手動でコマンドを実行しなければならないという点がなんともスマートではないことと、
build.gradle を変更した場合(依存関係などを追加した場合)に再度コマンドを実行し直さなければなりません。
「Gradle Integration for Eclipse」プラグインを利用している場合はこのあたりを自動でやってくれます。</p>

<p>provided で除去するのは殆どの場合 servlet-api や jsp-api ですので、
腑に落ちない気持ちはありつつも、「Gradle Integration for Eclipse」プラグインを使用し、
Eclipseの設定で除去してしまう方法で利用していく方が無難かと思われます。</p>

<h2>08. 複数のMavenリポジトリを定義する</h2>


<p>参照するMavenリポジトリは repositories ブロック内で以下のように定義します。</p>

<p>``` groovy
/<em>*
 * サブプロジェクト全体の共通設定。
 *
 </em>/
subprojects {</p>

<pre><code>apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'

repositories {

    maven {

        url getProperty('project.maven.repository.url.01')

    }
    mavenCentral()

}
</code></pre>

<p>}
```</p>

<p>任意のリポジトリを複数定義する場合は、mavenブロックに url パラメータを複数記述するかと思いがちですが、
そのような記述は出来ません。
以下のように記述します。</p>

<p>``` groovy
/<em>*
 * サブプロジェクト全体の共通設定。
 *
 </em>/
subprojects {</p>

<pre><code>apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'

repositories {

    maven {

        url getProperty('project.maven.repository.url.01')

    }
    maven {

        url getProperty('project.maven.repository.url.02')

    }
    mavenCentral()

}
</code></pre>

<p>}
```</p>

<p>上記のように、mavenブロックを複数宣言することでURLを複数指定できます。</p>

<h2>09. アーカイブタスクで exclude 指定が効かない</h2>


<p>これも人によってはAntやMavenのときの記述に慣れてしまっているが故に勘違いしてしまいがちなのですが、
Zipなどのアーカイブタスクで exclude 指定をした場合に効かないように見えてしまう場合が有ります。</p>

<p>例として、前回紹介したbatchのパッケージを作成するタスクにおいて一部のファイルをZIPファイルへ含めないようにしたいと思います。</p>

<p>``` groovy
/<em>*
 * バッチ
 </em>/
project(&lsquo;:batch&rsquo;) {</p>

<pre><code>/**
 * リリース用パッケージの作成を行う。
 *
 */
task distribution(dependsOn: 'jar', type: Zip) {

    into ('batch/bin') {

        from 'bin'
        exclude 'bin/test.sh'   // test.sh を除去する指定

    }


    into ('batch/libs') {

        from 'build/libs/batch.jar'
        from configurations.compile

    }


}
</code></pre>

<p>}
```</p>

<p>上記では、binディレクトリの中身にある test.sh のコピーを除去する想定で記述しました。
しかし、実際にこの状態でアーカイブを作成すると、 test.sh ファイルはZIPの中に含まれてしまいます。
AntやMavenの場合だと、exclude の指定を行えばそれだけで対象となるパスのファイルが除去されましたが、
Gradleの場合だと、以下のように指定する必要があります。</p>

<p>``` groovy
/<em>*
 * バッチ
 </em>/
project(&lsquo;:batch&rsquo;) {</p>

<pre><code>/**
 * リリース用パッケージの作成を行う。
 *
 */
task distribution(dependsOn: 'jar', type: Zip) {

    into ('batch/bin') {

        from ('bin') {

            exclude 'test.sh'   // test.sh を除去する指定

        }

    }


    into ('batch/libs') {

        from 'build/libs/batch.jar'
        from configurations.compile

    }


}
</code></pre>

<p>}
```</p>

<p>上記のように記述することで bin/test.sh ファイルをコピーしないようになります。
Gradleのアーカイブタスクにおける exclude 指定は、このようにコピーする対象となるディレクトリの from ブロック内に exclude 指定を記述する必要があります。</p>

<h2>10. ブランチ切り替えを頻繁に行った場合に他のブランチのクラスファイルが残る場合がある</h2>


<p>これは主にJenkinsでJavaビルドを行う場合に起こることが多いのですが、JenkinsではジョブのSCMのブランチ切り替えを頻繁に行うかと思います。
そうなると、例えばあるブランチにはあって、あるブランチにはないクラスファイルというものが当然のように出てきます。
そして、そのクラスファイルの一部が残ることでビルドエラーが発生する場合があります。
これを回避するには、以下のように「clean」タスクをビルド前に実行するように指定することで回避することが出来ます。(尤も、これはGradleに限らずMavenでも同じです)</p>

<p><code>groovy
gradle --daemon clean war
</code></p>

<p>clean タスクを実行すると更新する必要がないクラスも再コンパイルするようになってしまいますので、
ブランチ切り替えを行わないような例では開発スピードをあげるために、あえて clean を指定しないというのも手かと思います。
とはいえ、本番環境へリリースするWARやJARをビルドする場合は、万が一のことを考えて clean タスクを指定してビルドすることをお勧めします。</p>

<h2>11. 突然動作がおかしくなった場合にキャッシュをクリアする方法</h2>


<p>例えば、MavenリポジトリのURLを変更したなど、
さまざまな理由でキャッシュが残った場合に動作がおかしくなってエラーが発生する場合が有ります。
その場合、Gradleの作業用ディレクトリを削除すれば正常に動作する場合が有ります。
ユーザのホームディレクトリにある「.gradle」というディレクトリを削除することでキャッシュをクリアすることが出来ます。
ただしこの場合、Mavenの依存関係を一から取得し直しになるために、初回のビルド時に時間がかかります。
あくまで原因不明のエラー回復のための最終手段と思ってください。</p>

<h2>まとめ</h2>


<p>今回は私がGradleを利用した上でハマるであろうと考えたポイントを 11 個紹介させていただきました。
AntやMavenに慣れた人たちからすると、Gradleは最初のうちは少々取っ付きにくいものであるため、
このようにいくつかハマってしまうポイントが発生します。
Gradleをこれから使ってみようと思う皆様の参考になれば幸いです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradleによるビルドとパッケージ作成]]></title>
    <link href="http://kkoudev.github.io/blog/2014/03/24/gradle_build/"/>
    <updated>2014-03-24T21:46:02+09:00</updated>
    <id>http://kkoudev.github.io/blog/2014/03/24/gradle_build</id>
    <content type="html"><![CDATA[<p>前回の続きです。
Gradleのプロジェクトの設定が終わっただけでは当然ながら終わりません。
次はビルドが必要になります。
プロジェクト構成は前回の例をそのまま踏襲するとして、
実際にビルドをするときのコマンドを紹介します。</p>

<h2>WARとJARのビルド</h2>


<p>WARのビルドは以下のコマンドで行います。
(build.gradle ファイルのあるディレクトリへ移動してコマンドを実行します)</p>

<p><code>groovy
gradle --daemon war
</code></p>

<p>なんとこれだけでWARのビルドが出来ます。
非常に簡潔です。
Gradleコマンドは立ち上がりが遅いのですが、上記のように &mdash;daemon というオプションを指定することでバックグラウンドに常駐するようになり、２回目以降のコマンドの立ち上がりが早くなります。</p>

<p>さて、前回のプロジェクト構成ですと、WARプロジェクトではないbatchプロジェクトが存在していたかと思います。
batchの場合はWARではなくJARとして作成する必要がありますので、上記のコマンドでは当然ビルドされません。
以下のコマンドでビルドします。</p>

<p><code>groovy
gradle --daemon :batch:jar
</code></p>

<p>「:batch:jar」という指定は batch プロジェクトの jar タスクを実行するという指定になります。
WARのビルドの場合、build.gradle に記述されているWARプロジェクトを全て自動的に走査してビルドしてくれますが、
JARの指定を行う場合、WARプロジェクト自体もJARビルドが出来てしまうため、「gradle &mdash;daemon jar」としてしまうと
不要なプロジェクトに対してまでJARビルドが走ってしまいます。そのため、上記のようにプロジェクトを指定してビルドしています。</p>

<p>また、gradleの実行タスクはひとまとめにすることが出来ますので、WARビルドとbatchプロジェクトのJARビルドを合わせると以下のようになります。</p>

<p><code>groovy
gradle --daemon war :batch:jar
</code></p>

<h2>リリース用パッケージの作成</h2>


<p>次はリリース用のパッケージの作成についてです。
デプロイ時はAPサーバにそのままWARをコピーすれば良いのですが、
必要なファイルを全てひとまとめに圧縮して対象サーバへ転送し、ファイルを展開するような例も多いかと思います。
また、batchファイルについてはWARと違い、依存関係となるライブラリも全てコピーしてあげなくてはいけません。</p>

<p>Mavenだと maven-assembly-plugin というXMLに記述した構成でパッケージを作成するプラグインがありましたが、
これもXMLファイルに設定を記述していくので記述量が増えがちで若干面倒な感じがありました。
GradleではWARやJARの他にZIPやTARを生成するタスクも用意されており、
これらを組み合わせることで maven-assembly-plugin と同等の機能を実現できます。</p>

<p>具体的にbatchパッケージを作成する例を紹介しますと、batchプロジェクトの設定に以下のようにタスクを定義します。
(設定は前回のものを踏襲)</p>

<p>``` groovy
/<em>*
 * バッチ
 </em>/
project(&lsquo;:batch&rsquo;) {</p>

<pre><code>// クラスパスへ provided を追加
sourceSets.main.compileClasspath     += project(':base').configurations.provided
sourceSets.test.compileClasspath     += project(':base').configurations.provided
sourceSets.test.runtimeClasspath     += project(':base').configurations.provided
eclipse.classpath.plusConfigurations += project(':base').configurations.provided
idea.module.scopes.PROVIDED.plus     += project(':base').configurations.provided

dependencies {

    compile project(':base')

}


/**
 * リリース用パッケージの作成を行う。
 *
 */
task distribution(dependsOn: 'jar', type: Zip) {

    into ('batch/bin') {

        from 'bin'

    }

    into ('batch/libs') {

        from 'build/libs/batch.jar'
        from configurations.compile

    }

}
</code></pre>

<p>}
```</p>

<p>上記にある distribution というタスクが新しく追加したタスクになります。
「type: Zip」という指定からもわかるように、このタスクではZIPファイルを作成します。
次に、dependsOn という指定がありますが、これは distribution タスクの実行が指定されたときに
distributionタスク実行前に実行するタスクの指定になります。
ここでは jar タスクが指定されていますので batchプロジェクトのjar ビルドが先に実行されるということになります。
そして、distribution タスク内に記述されたディレクトリ構成でZIPファイルが作成されるという仕組みです。
into というブロックの引数に ZIP ファイルのルートからのパスを記述し、
そのブロック内に from という指定でコピーするファイルを指定するという感じです。</p>

<p>上記の例で実際に作成されるZIPファイルとその中身は以下のようになります。</p>

<pre><code>batch - bin  - (batch/binに含まれているファイル。シェルスクリプト等)
        libs - batch.jar
               batchプロジェクトの依存関係となるJARファイル全て
               (configurations.compile 変数にコンパイル時に全ての依存関係ファイルへのパスが含まれている)
</code></pre>


<p>ちなみに、build/libs/batch.jar ファイルは jar タスクでビルド後に作成されるJARファイルになります。
(デフォルトだとbatchプロジェクトのディレクトリからの相対パスで build/libs/batch.jar として作成されます)
見ても判る通り、maven-assembly-pluginに比べて記述量が遥かに少ないことが判ります。
このようにしてリリース用パッケージも簡単に作ることが出来ます。</p>

<p>以上をまとめると、最終的にWARとJARおよびbatchパッケージを作成するコマンドは以下のようになります。</p>

<p><code>groovy
gradle --daemon war :batch:distribution
</code></p>

<h2>まとめ</h2>


<p>このように、Gradleだとビルドとパッケージの作成も非常に簡単にできます。
ここまでの話ですとMavenを利用する場合に比べての優位性というのは有るには有るが、敢えて移行する必要まであるか？と感じられている方は多いかも知れません。
実際Mavenでも十分な例は多いです。</p>

<p>ただ、MavenとGradleが決定的に違うところは、
前者は「<strong><font color="red">設定ファイルを記述する</font></strong>」ビルドツールであり、
後者は「<strong><font color="red">スクリプトを記述する</font></strong>」ビルドツールであることです。
つまり、後者は println を使って途中経過を出力することが可能なので、デバッグも容易です。
Mavenのように正しい設定ありきで内部の処理の動きを追えないツールと比べると大いに勝っている利点であると私は考えています。</p>

<p>また、ここまで紹介していませんでしたが、
GradleはGradle自体をインストールしていない環境でもJavaさえあれば実行できる gradlew という仕組みもあります。
これも Maven にはない大きな利点です。</p>

<p>次回はこれらの点の紹介も含めて、Gradleを利用する際によく利用するであろうTIPS集をいくつか紹介していきたいと思います。</p>
]]></content>
  </entry>
  
</feed>
